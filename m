From: "Greg A. Woods" <woods@planix.com>
Subject: Re: "git merge" merges too much!
Date: Mon, 30 Nov 2009 13:40:38 -0500
Message-ID: <m1NFBAx-000kmgC@most.weird.com>
References: <m1NEaLp-000kn1C@most.weird.com>
	<7vskbxewti.fsf@alter.siamese.dyndns.org>
Reply-To: The Git Mailing List <git@vger.kernel.org>
Mime-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: multipart/signed;
 boundary="pgp-sign-Multipart_Mon_Nov_30_13:40:38_2009-1"; micalg=pgp-sha1;
 protocol="application/pgp-signature"
Content-Transfer-Encoding: 7bit
Cc: The Git Mailing List <git@vger.kernel.org>
To: Junio C Hamano <gitster@pobox.com>
X-From: git-owner@vger.kernel.org Mon Nov 30 19:40:55 2009
Return-path: <git-owner@vger.kernel.org>
Envelope-to: gcvg-git-2@lo.gmane.org
Received: from vger.kernel.org ([209.132.176.167])
	by lo.gmane.org with esmtp (Exim 4.50)
	id 1NFBB7-0001T1-DP
	for gcvg-git-2@lo.gmane.org; Mon, 30 Nov 2009 19:40:53 +0100
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752934AbZK3Skl (ORCPT <rfc822;gcvg-git-2@m.gmane.org>);
	Mon, 30 Nov 2009 13:40:41 -0500
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S1752791AbZK3Skl
	(ORCPT <rfc822;git-outgoing>); Mon, 30 Nov 2009 13:40:41 -0500
Received: from mail.planix.com ([204.92.254.2]:60809 "EHLO most.weird.com"
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752722AbZK3Skk (ORCPT <rfc822;git@vger.kernel.org>);
	Mon, 30 Nov 2009 13:40:40 -0500
Received: from once.weird.com
	([204.92.254.13] port=53025)
	by most.weird.com([204.92.254.2] port=25)
	via TCP with esmtp (5853 bytes)
	(sender: <woods@once.weird.com>)
	(ident <woods> using rfc1413)
	id <m1NFBAx-000kmgC@most.weird.com>
	for <git@vger.kernel.org>;
	Mon, 30 Nov 2009 13:40:43 -0500 (EST)
	(Smail-3.2.0.122-Pre 2005-Nov-17 #1 built 2009-Feb-3)
In-Reply-To: <7vskbxewti.fsf@alter.siamese.dyndns.org>
User-Agent: Wanderlust/2.15.6 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.7 (=?ISO-8859-4?Q?Sanj=F2?=) APEL/10.7 Emacs/22.3
 (i386--netbsdelf) MULE/5.0 (SAKAKI)
X-Face: ;j3Eth2XV8h1Yfu<eXd9JL+"t;iT8?{X]Fjm`Qb]>*uL{<:dQ$#E[DB0gemGZJ"J#4fH*][
 lz;@-iwMv_u\6uIEKR0KY"=MzoQH#CrqBN`nG_5B@rrM8,f~Gr&h5a\=<t0loVf0$}bP=]i3OMh"n_
 _@m4/,~2`V=(-9LyW.)'`@E_fE^<4y7)BIe`A''/j-Y#gDNZERh%CCij'q-NA4F<|yjznEhd7=l^xH
 2.qD3o0IanGHERTW+z$G
Sender: git-owner@vger.kernel.org
Precedence: bulk
List-ID: <git.vger.kernel.org>
X-Mailing-List: git@vger.kernel.org
Archived-At: <http://permalink.gmane.org/gmane.comp.version-control.git/134128>

--pgp-sign-Multipart_Mon_Nov_30_13:40:38_2009-1
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: quoted-printable

At Sat, 28 Nov 2009 21:15:05 -0800, Junio C Hamano <gitster@pobox.com> wrot=
e:
Subject: Re: "git merge" merges too much!
>=20
> In order to make things smoother and easier in the future, you may want to
> learn "topic branch" workflows (found in many git tutorial material).

I was thinking hard about topic branches too, but I'm still having a
hard time figuring out how they might work best for my purposes.

One hard problem is how to create "clean" topic branches and use them
effectively when the local working environment requires all or many of
the whole set of local changes.  Bootstrapping these local changes as
topic branches may be one thing; but going further with topic branches
to create local features or fixes, some of which are to be submitted
upstream for eventual inclusion in the origin/master branch, and others
of which will only ever be ported forward to future official releases,
is quite another thing all together.

These new-feature topic branches will have to be worked on from the
main (most well supported) local branch, which will be forked from the
main release branch (or based on the trunk at the main release tag), but
yet care will have to be taken to make sure the merge doesn't include
dependencies on local-only changes (i.e. so that it can be safely
submitted upstream).

Some projects also only wish to receive patches that work against their
trunk branch, so a given local topic branch will have to be merged onto
yet another branch forking from the trunk where it may likely encounter
conflicts (since the topic branch is based on older code from an
existing release).  This isn't really a Git problem I suppose, except
for the fact that it means the lack of easy support for multiple working
directories that track different branches makes this kind of development
somewhat more difficult to do with Git than with, say, CVS.

While it may be quite convenient in small projects to quickly move a
single working directory from one branch to another and do various
builds and tests from the result, large projects (say where a compile
takes the better part of a working day or more and where testing
requires multi-day processes) demand that working directories remain
"stable", and multiple lines of development therefore demand multiple
working directories.  Developing procedures around Git to manage this
with "push" and "pull" into multiple local copies of the repository,
each with their own working directory, is of course possible (though not
necessarily easy), but once again if the repositories are similarly huge
then it may not be possible to support multiple repo copies for each
developer in a given working environment.

So, ideally it seems from my understanding at this point that I want to
be able to repeatedly merge topic branch changes (as they are worked on)
into multiple local configuration branches (each of which perhaps
includes multiple local topics and other changes), each of which pushes
its changes out into possibly multiple working directories.


> But it is too late for the history you already created; "cherry-pick" is
> your friend to recover from the shape of your existing history.

The problem is that it's not _my_ existing history -- it's from the
remote project I'm trying to work with.

I think you'll agree there nothing wrong with a project using tags alone
to manage its releases.

However this means I've got to work out how to do merges of my local
changes onto multiple locally created branches which fork off from these
tags.  Perhaps using this cherry-pick tool is truly the best I can do in
this situation.

(it makes me worry though about how I might manage a super-project which
pulls from many remote sub-projects (and which includes large amounts of
its own code) where some of those remote projects use release branches,
and some just use tags, etc.)

--=20
						Greg A. Woods

+1 416 218-0098                VE3TCP          RoboHack <woods@robohack.ca>
Planix, Inc. <woods@planix.com>      Secrets of the Weird <woods@weird.com>

--pgp-sign-Multipart_Mon_Nov_30_13:40:38_2009-1
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.9 (NetBSD)

iD8DBQBLFBGmZn1xt3i/9H8RAjXEAKD8AdImDicJq/xRqJjeAfR4kF3zggCgpA2s
O4rAi5RlQpqushE/DfAz1ic=
=90xw
-----END PGP SIGNATURE-----

--pgp-sign-Multipart_Mon_Nov_30_13:40:38_2009-1--
