From: fuz@fuz.su
Subject: Re: git archive should use vendor extension in pax header
Date: Thu, 28 Jan 2016 00:25:34 +0100
Message-ID: <20160127232534.GA5435@fuz.su>
References: <20160124155909.GA16847@fuz.su>
 <56A7EDE1.1020909@web.de>
Mime-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: QUOTED-PRINTABLE
To: git@vger.kernel.org
X-From: git-owner@vger.kernel.org Thu Jan 28 00:20:15 2016
Return-path: <git-owner@vger.kernel.org>
Envelope-to: gcvg-git-2@plane.gmane.org
Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <git-owner@vger.kernel.org>)
	id 1aOZNg-0003bC-OQ
	for gcvg-git-2@plane.gmane.org; Thu, 28 Jan 2016 00:20:09 +0100
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932213AbcA0XUE convert rfc822-to-quoted-printable (ORCPT
	<rfc822;gcvg-git-2@m.gmane.org>); Wed, 27 Jan 2016 18:20:04 -0500
Received: from fuz.su ([5.135.162.8]:60839 "EHLO fuz.su"
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1755242AbcA0XUD (ORCPT <rfc822;git@vger.kernel.org>);
	Wed, 27 Jan 2016 18:20:03 -0500
Received: by fuz.su (Postfix, from userid 1000)
	id AC91220227; Thu, 28 Jan 2016 00:25:34 +0100 (CET)
Content-Disposition: inline
In-Reply-To: <56A7EDE1.1020909@web.de>
User-Agent: Mutt/1.5.21 (2010-09-15)
Sender: git-owner@vger.kernel.org
Precedence: bulk
List-ID: <git.vger.kernel.org>
X-Mailing-List: git@vger.kernel.org

On Tue, Jan 26, 2016 at 11:06:25PM +0100, Ren=C3=A9 Scharfe wrote:
> Am 24.01.2016 um 16:59 schrieb fuz@fuz.su:
> >Right now, git archive creates a pax global header of the form
> >
> >     comment=3D57ca140635bf157354124e4e4b3c8e1bde2832f1
> >
> >in tar archives it creates. This is suboptimal as as comments are
> >specified to be ignored by extraction software. It is impossible to
> >find out in an automatic way (short of guessing) that this is suppos=
ed
> >to be a commit hash.
>=20
> This is only a problem if you don't know how a given tar files was
> created (or modified later).  How did you get into this situation?
> Or in other words: Please tell me more about your use case.

My situation is that I'm interested in knowing if an archive was create=
d
by git so I can find out where the corresponding repository is and find
out which commit this archive was created from.  Right now the only way
is to open a hex editor or as archiving software is instructed to ignor=
e
the content of comment headers.  This is clearly a suboptimal situation=
=2E

> >It would be much more useful if git created a
> >custom key. As per POSIX suggestions, something like this would be
> >appropriate:
> >
> >     GIT.commit=3D57ca140635bf157354124e4e4b3c8e1bde2832f1
>=20
> This would be included in addition to the comment in order to avoid
> breaking existing users, I guess.

Good point.  I'm not sure how many user use the comment header at all.

> If you have a random archive and want to know if it was generated by
> git then your next question might be which options and substitutions
> were used.  That reminds me of this thread regarding verifiable
> archives:
>=20
>     http://article.gmane.org/gmane.comp.version-control.git/240244

Good point.  Something like this should be enough to be enough to have
reproducable archives if archives with a tree ID were to have a time
stamp of 0 (1970-01-01) instead of the current date:

    comment=3D...    (for compatibility)
    GIT.commit=3D... (like comment)
    GIT.umask=3D...  (tar.umask)
    GIT.prefix=3D... (--prefix=3D)
    GIT.path=3D...   (see below
    GIT.export-subst=3D1 (in extended header instead of global header)

A different key such as GIT.treeish might be appropriate.  The
GIT.export-subst key should be set only for those files where a
substitution has taken place. Maybe there should also be an
GIT.original-name key.

An option GIT.export-ignore is not required.  Instead it would be more
useful to have a special file type G (for git) with the convention that
the file name .gitattributes means =E2=80=9Cattributes that apply to th=
is git
archive.=E2=80=9D

The GIT.path option holds the paths that are being archived. It is a bi=
t
tricky to get right.  The intent of POSIX pax headers is that each key
is an attribute that applies to a series of files.  In the case of a
global header, each key applies until it is overridden with a new
header or with a local header.  A GIT.path key should only apply to the
files that correspond to this path operant to git archive.  Thus, a new
GIT.path should be written frequently.  There should always be at least
one GIT.path.

It might be a good idea to be able to control the kind of metadata git
adds to the archive as to be able to not leak any confidential
information with git archive.  If you are interested I can try to make =
a
specification for these headers.

Yours sincerely,
Robert Clausecker

--=20
()  ascii ribbon campaign - for an 8-bit clean world=20
/\  - against html email  - against proprietary attachments
