From: "Greg A. Woods" <woods@planix.com>
Subject: "git merge" merges too much!
Date: Sat, 28 Nov 2009 22:21:25 -0500
Message-ID: <m1NEaLp-000kn1C@most.weird.com>
Reply-To: The Git Mailing List <git@vger.kernel.org>
Mime-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: multipart/signed;
 boundary="pgp-sign-Multipart_Sat_Nov_28_22:21:25_2009-1"; micalg=pgp-sha1;
 protocol="application/pgp-signature"
Content-Transfer-Encoding: 7bit
To: The Git Mailing List <git@vger.kernel.org>
X-From: git-owner@vger.kernel.org Sun Nov 29 04:31:05 2009
Return-path: <git-owner@vger.kernel.org>
Envelope-to: gcvg-git-2@lo.gmane.org
Received: from vger.kernel.org ([209.132.176.167])
	by lo.gmane.org with esmtp (Exim 4.50)
	id 1NEaV7-0007Ev-EF
	for gcvg-git-2@lo.gmane.org; Sun, 29 Nov 2009 04:31:05 +0100
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753824AbZK2Day (ORCPT <rfc822;gcvg-git-2@m.gmane.org>);
	Sat, 28 Nov 2009 22:30:54 -0500
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S1753823AbZK2Day
	(ORCPT <rfc822;git-outgoing>); Sat, 28 Nov 2009 22:30:54 -0500
Received: from mail.weird.com ([204.92.254.2]:54323 "EHLO most.weird.com"
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753758AbZK2Dax (ORCPT <rfc822;git@vger.kernel.org>);
	Sat, 28 Nov 2009 22:30:53 -0500
X-Greylist: delayed 570 seconds by postgrey-1.27 at vger.kernel.org; Sat, 28 Nov 2009 22:30:53 EST
Received: from once.weird.com
	([204.92.254.13] port=54834)
	by most.weird.com([204.92.254.2] port=25)
	via TCP with esmtp (4376 bytes)
	(sender: <woods@once.weird.com>)
	(ident <woods> using rfc1413)
	id <m1NEaLp-000kn1C@most.weird.com>
	for <git@vger.kernel.org>;
	Sat, 28 Nov 2009 22:21:29 -0500 (EST)
	(Smail-3.2.0.122-Pre 2005-Nov-17 #1 built 2009-Feb-3)
User-Agent: Wanderlust/2.15.6 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.7 (=?ISO-8859-4?Q?Sanj=F2?=) APEL/10.7 Emacs/22.3
 (i386--netbsdelf) MULE/5.0 (SAKAKI)
X-Face: ;j3Eth2XV8h1Yfu<eXd9JL+"t;iT8?{X]Fjm`Qb]>*uL{<:dQ$#E[DB0gemGZJ"J#4fH*][
 lz;@-iwMv_u\6uIEKR0KY"=MzoQH#CrqBN`nG_5B@rrM8,f~Gr&h5a\=<t0loVf0$}bP=]i3OMh"n_
 _@m4/,~2`V=(-9LyW.)'`@E_fE^<4y7)BIe`A''/j-Y#gDNZERh%CCij'q-NA4F<|yjznEhd7=l^xH
 2.qD3o0IanGHERTW+z$G
Sender: git-owner@vger.kernel.org
Precedence: bulk
List-ID: <git.vger.kernel.org>
X-Mailing-List: git@vger.kernel.org
Archived-At: <http://permalink.gmane.org/gmane.comp.version-control.git/133988>

--pgp-sign-Multipart_Sat_Nov_28_22:21:25_2009-1
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: quoted-printable

I'm trying to learn to use Git to manage local changes.  I'm very new to
Git (hi all!), but not new at all to version tracking tools in general.

Hope I've found the right list on which to ask potentially naive
questions!  I've been doing _lots_ of reading about Git, but I can't
seem to find anything about the problems I relate below.

One task I'm working on is to try to find the best way to merge changes
made from one branch to another, eg. to propagate local fixes from one
release to another.

However in at least one simple case "git merge" merges too much.

I have something like this started from a remote-cloned repository where
BL1.2 is a branch from the remote master HEAD, which happens to
correspond to a tag "TR1.2", the release-1.2 tag, and I've made three
local commits to my local BL1.2 branch: A, B, and C:

                                         BL1.2 - A - B - C  <- BL1.2 HEAD
                                        /
master 1 - 2 - TR1.1 - 3 - 4 - 5 - TR1.2  <- master HEAD


(there are no "release" branches in this project, just tags on the
master branch to represent release points -- is there any way to get
"git log" to show which tags are associated with a given commit and/or
branch?  The real project is freedesktop.org's xinit repo, but the real
tree is too messy to diagram here -- hopefully I've extracted the
essence of the problem correctly)

I now want to create a branch "BL1.1" and merge commits A, B, and C to it
in order to back-port my local fixes to the TR1.1 release.  "TR1.1" is
simply a tag on the origin/master trunk.

I do the following:

	git checkout -b BL1.1 TR1.1
	git merge BL1.2

However this seems to merge all of 3, 4, and 5, as well as A, B, and C.

I think I can (barely) understand why it's doing what it's doing, but
that's not what I want it to do.  However it looks like Git doesn't have
the same idea of a branch "base" point as I think I do.

Running "git log TR1.2..BL1.2" does show me exactly the changes I wish
to propagate, but "git merge TR1.2..BL1.2" says "not something we can
merge".  Sigh.

How can I get it to merge just the changes from the "base" of the BL1.2
branch to its head?

Is using either git-cherry-pick or "git log -p | git-am", the only way
to do this?  Which way best preserves Git's ability to realize if a
change has already been included on the target branch, if any?

Is this the kind of "problem" that drove the creators of Stacked-Git to
invent their tools?

Is there any way to get "git log --graph" (and/or gitk) to show me all
the branch heads, not just the current/specified one?

--=20
						Greg A. Woods

+1 416 218-0098                VE3TCP          RoboHack <woods@robohack.ca>
Planix, Inc. <woods@planix.com>      Secrets of the Weird <woods@weird.com>

--pgp-sign-Multipart_Sat_Nov_28_22:21:25_2009-1
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.9 (NetBSD)

iD8DBQBLEei1Zn1xt3i/9H8RAqzmAJ4gKtrHwZgXGE2zBpdS4EWvqDMZJQCguA3z
V2gbJyQiCj5Y8w0xM15fOVw=
=MWxq
-----END PGP SIGNATURE-----

--pgp-sign-Multipart_Sat_Nov_28_22:21:25_2009-1--
