Received: from mail-yw1-f179.google.com (mail-yw1-f179.google.com [209.85.128.179])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 0EF5A56759
	for <git@vger.kernel.org>; Thu, 11 Jan 2024 20:07:59 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=umich.edu
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=umich.edu
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=umich.edu header.i=@umich.edu header.b="SsJDsBkA"
Received: by mail-yw1-f179.google.com with SMTP id 00721157ae682-5fa52e173f7so24556297b3.3
        for <git@vger.kernel.org>; Thu, 11 Jan 2024 12:07:59 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=umich.edu; s=google-2016-06-03; t=1705003679; x=1705608479; darn=vger.kernel.org;
        h=content-transfer-encoding:cc:to:subject:message-id:date:from
         :in-reply-to:references:mime-version:from:to:cc:subject:date
         :message-id:reply-to;
        bh=Ouapm8Bcos/z9vaAfufjB0mIn1WCFZmHezoRcTa3ntw=;
        b=SsJDsBkAXEaZCLsU4eSrNenBDotUNNuzyKsK44ebMx62dR/EXyD0IWdm5X9SLIxKGS
         fgDHTqigO6HDOR5QYURkIlxrH0dT99vCU3OukC8ABIpSQK372Yw8c6sdJLuvGEFiy0ah
         l2cGHPHZ0RgbXp5RPDFprZW0iGSWJGaMX4Id7Oe2c7NgGgg4WYwIRENdX5YqBrm35uu8
         IgwnMH0GblQGa0N0S78REK2rhZtYbKfRh4nondO+/UToD//D4FdhqXCOKLJabFf7zSZh
         PBycqR0VYw2MZ9OXKxadfEof1TS9j0h/pexFZcDNQv+qk/tEyoG94+adQe/C/onaxVK6
         TrYQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20230601; t=1705003679; x=1705608479;
        h=content-transfer-encoding:cc:to:subject:message-id:date:from
         :in-reply-to:references:mime-version:x-gm-message-state:from:to:cc
         :subject:date:message-id:reply-to;
        bh=Ouapm8Bcos/z9vaAfufjB0mIn1WCFZmHezoRcTa3ntw=;
        b=SfnqQIEfQlO/paRf3wqzhjXqRStDmwYWRgu2gYjr4UDv5NX2+ycm2rioQ5QT2YtcPd
         giQ6fGYsGysvYGqjvj8UNRi1D0mVGDbinDlPLvVZXDsMo43MXm8IE3j0W8LN/MsG2HU2
         FRX8cFsaYB0tZTtHeVawl3o2ITF5UPeUpAheAeMZClW+5bSNt75OErizqaLbEqL6UMTK
         /I62Kr32y45s7iJO2UBkOTLD+04Gyxdohy3aT/t6jFTb/Ucr1UP9R3+lrH5zNmIun/Yc
         lLgqP86WUBSXT7SWfyBOPzR+lUnPeZ2mN7FU7kQwDP81jMD8vCwn4kP+Oxmghz8BcF07
         sztQ==
X-Gm-Message-State: AOJu0Yxks0Um1sJtb6vD6oZjy/HNa515HCMevlYGQe0NnFOBIvJwqqVM
	6m+o7eTdzmanG/law5Zhcqy6vRvVh7HYAAi6+LBdcWqx7OCJpQ==
X-Google-Smtp-Source: AGHT+IECo3HhJw/mq1vB8NKH7XgWE2XYDTh2UysPu65/MwkpIbm5mFfc31xSdA2NWvTrRWWkRMHR0zmRfA+1VCcdaNw=
X-Received: by 2002:a0d:cc0c:0:b0:5d3:adfd:ff7d with SMTP id
 o12-20020a0dcc0c000000b005d3adfdff7dmr397137ywd.12.1705003678372; Thu, 11 Jan
 2024 12:07:58 -0800 (PST)
Precedence: bulk
X-Mailing-List: git@vger.kernel.org
List-Id: <git.vger.kernel.org>
List-Subscribe: <mailto:git+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:git+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
References: <ZZ77NQkSuiRxRDwt@nand.local> <b2651b38a4f7edaf1c5ffee72af00e46@manjaro.org>
 <xmqqjzog96uh.fsf@gitster.g> <006b01da4412$96c6c500$c4544f00$@nexbridge.com>
 <ZZ8ZlX6bf+hjmhN+@nand.local> <007c01da4420$10a7b700$31f72500$@nexbridge.com>
 <ZZ9YrYvW_L9A02aI@tapette.crustytoothpaste.net> <00a801da443d$b1539670$13fac350$@nexbridge.com>
In-Reply-To: <00a801da443d$b1539670$13fac350$@nexbridge.com>
From: Trevor Gross <tmgross@umich.edu>
Date: Thu, 11 Jan 2024 15:07:47 -0500
Message-ID: <CALNs47vfBH9u9B5B3tWRoEkJJiqne5067A4CFnZ3OaMVvz_gSg@mail.gmail.com>
Subject: Re: [DISCUSS] Introducing Rust into the Git project
To: rsbecker@nexbridge.com
Cc: "brian m. carlson" <sandals@crustytoothpaste.net>, Taylor Blau <me@ttaylorr.com>, 
	Junio C Hamano <gitster@pobox.com>, Dragan Simic <dsimic@manjaro.org>, git@vger.kernel.org
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

On Wed, Jan 10, 2024 at 10:24=E2=80=AFPM <rsbecker@nexbridge.com> wrote:
>
> There are a number of issues for porting gcc (and Go). The list is fairly=
 long, but the summary of what I encountered directly (on the last funded e=
ffort of 3) is:
> 1. There are C syntax constructs required to do anything useful (required=
 for access to the OS API) on NonStop that are not in gcc. I can hand code =
the parser for that, but it would take time.
> 2. The Big Endian x86 architecture is weird to gcc and making that work i=
s not easy.
> 3. There is no assembler on NonStop.
> 4. The ELF header is very different from standard.
> 5. The symbol table structure is radically different, so debugging would =
be (nearly) impossible or impractical. gdb was ported to account for the pl=
atform differences.
> 6. The linkage structure is similar but different from standard.
> 7. The external fixup structure is radically different.
> 8. The loader does not work the same way, so there are required sections =
of the ELF files on NonStop that are not generated by gcc.
>
> There are more, but I just did not get to the point if hitting them. Part=
 of my own issue is that I have expertise in parsing and semantic passes of=
 compilers, but my code generation skills are not where I want them to be f=
or taking on this effort. Our last funded attempt had a code generation exp=
ert and he gave up in frustration.
>
> If I was hired on to do this, it might have a chance, but at an estimate =
(not mine) of 4-5 person years for a gcc port, best case, my $DAYJOB will n=
ot permit it.
>
> If gcc could be ported to NonStop, it would solve so many problems. I hav=
e heard of numerous failed efforts beyond what was officially funded by var=
ious companies, so this is considered a high-risk project.

Out of curiosity - does the Tandem compiler (assuming that is the
correct name) have a backend that is usable as a library or via an IR?

If so, maybe it would be possible to write a rustc_codegen_tandem
backend like the three that exist (rustc_codegen_{llvm,gcc,cranelift}
at [1]. GCC and cranelift are still under development). This way you
sidestep a lot of the codegen-specific problems listed above.

I am, of course, not suggesting this as a solution for git and am sure
you would rather have GCC support. But I wonder how feasible this
would be if Rust on NonStop is desired at some point.

[1]: https://github.com/rust-lang/rust/tree/062e7c6a951c1e4f33c0a6f67617559=
49cde15ec/compiler
