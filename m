Return-Path: <git-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on dcvr.yhbt.net
X-Spam-Level: 
X-Spam-ASN: AS31976 209.132.180.0/23
X-Spam-Status: No, score=-4.2 required=3.0 tests=BAYES_00,MAILING_LIST_MULTI,
	RCVD_IN_DNSWL_HI shortcircuit=no autolearn=ham autolearn_force=no
	version=3.4.0
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by dcvr.yhbt.net (Postfix) with ESMTP id A1ABF1F51C
	for <e@80x24.org>; Fri, 25 May 2018 07:22:39 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S935389AbeEYHWh (ORCPT <rfc822;e@80x24.org>);
        Fri, 25 May 2018 03:22:37 -0400
Received: from mx2.suse.de ([195.135.220.15]:38591 "EHLO mx2.suse.de"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S935134AbeEYHWg (ORCPT <rfc822;git@vger.kernel.org>);
        Fri, 25 May 2018 03:22:36 -0400
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay1.suse.de (charybdis-ext-too.suse.de [195.135.220.254])
        by mx2.suse.de (Postfix) with ESMTP id 19294AC8A;
        Fri, 25 May 2018 07:22:35 +0000 (UTC)
Date:   Fri, 25 May 2018 09:22:34 +0200
From:   Michal Hocko <mhocko@kernel.org>
To:     Jeff King <peff@peff.net>
Cc:     git@vger.kernel.org
Subject: Re: unexpected "unresolved merge conflict" for a new file
Message-ID: <20180525072234.GD11881@dhcp22.suse.cz>
References: <20180524113657.GD20441@dhcp22.suse.cz>
 <20180524171120.GC14876@sigill.intra.peff.net>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="5vNYLRcllDrimb99"
Content-Disposition: inline
In-Reply-To: <20180524171120.GC14876@sigill.intra.peff.net>
User-Agent: Mutt/1.9.5 (2018-04-13)
Sender: git-owner@vger.kernel.org
Precedence: bulk
List-ID: <git.vger.kernel.org>
X-Mailing-List: git@vger.kernel.org


--5vNYLRcllDrimb99
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline

On Thu 24-05-18 13:11:20, Jeff King wrote:
> On Thu, May 24, 2018 at 01:36:57PM +0200, Michal Hocko wrote:
> 
> > `git commit' fails on a newly added file with the following
> > *
> > * You have some suspicious patch lines:
> > *
> > * In Documentation/core-api/gfp_mask-from-fs-io.rst
> > * unresolved merge conflict (line 27)
> > Documentation/core-api/gfp_mask-from-fs-io.rst:27:=======
> 
> This message isn't generated by git itself, but rather by a pre-commit
> hook. You can skip the hook by running "git commit --no-verify".
> 
> As for the false positive in the hook logic, I can't say more without
> having seen the hook source. :) Do you know where you got it from?
> 
> (Googling for "suspicious patch lines" turns up some hits, but with
> varying provenance).

Ohh, I see. I must have installed this one loooong time ago. Attached
for reference. I will just drop it. Sorry about tht noise.
-- 
Michal Hocko
SUSE Labs

--5vNYLRcllDrimb99
Content-Type: text/plain; charset=us-ascii
Content-Disposition: attachment; filename=pre-commit

#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by git-commit with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, make this file executable.

# This is slightly modified from Andrew Morton's Perfect Patch.
# Lines you introduce should not have trailing whitespace.
# Also check for an indentation that has SP before a TAB.

if git-rev-parse --verify HEAD 2>/dev/null
then
	git-diff-index -p -M --cached HEAD --
else
	# NEEDSWORK: we should produce a diff with an empty tree here
	# if we want to do the same verification for the initial import.
	:
fi |
perl -e '
    my $found_bad = 0;
    my $filename;
    my $reported_filename = "";
    my $lineno;
    sub bad_line {
	my ($why, $line) = @_;
	if (!$found_bad) {
	    print STDERR "*\n";
	    print STDERR "* You have some suspicious patch lines:\n";
	    print STDERR "*\n";
	    $found_bad = 1;
	}
	if ($reported_filename ne $filename) {
	    print STDERR "* In $filename\n";
	    $reported_filename = $filename;
	}
	print STDERR "* $why (line $lineno)\n";
	print STDERR "$filename:$lineno:$line\n";
    }
    while (<>) {
	if (m|^diff --git a/(.*) b/\1$|) {
	    $filename = $1;
	    next;
	}
	if (/^@@ -\S+ \+(\d+)/) {
	    $lineno = $1 - 1;
	    next;
	}
	if (/^ /) {
	    $lineno++;
	    next;
	}
	if (s/^\+//) {
	    $lineno++;
	    chomp;
	    if (/\s$/) {
		bad_line("trailing whitespace", $_);
	    }
	    if (/^\s* \t/) {
		bad_line("indent SP followed by a TAB", $_);
	    }
	    if (/^([<>])\1{6} |^={7}$/) {
		bad_line("unresolved merge conflict", $_);
	    }
	}
    }
    exit($found_bad);
'

--5vNYLRcllDrimb99--
