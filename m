From: Carl Worth <cworth@cworth.org>
Subject: Re: [PATCH] Add new git-rm command with documentation
Date: Tue, 21 Feb 2006 15:04:51 -0800
Message-ID: <87r75ws48c.wl%cworth@cworth.org>
References: <87u0ass7tj.wl%cworth@cworth.org>
	<43FB8F31.9090302@people.pl>
	<87slqcs4y5.wl%cworth@cworth.org>
Mime-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: multipart/signed;
 boundary="pgp-sign-Multipart_Tue_Feb_21_15:04:51_2006-1"; micalg=pgp-sha1;
 protocol="application/pgp-signature"
Content-Transfer-Encoding: 7bit
Cc: Junio C Hamano <junkio@cox.net>, git@vger.kernel.org
X-From: git-owner@vger.kernel.org Wed Feb 22 00:06:24 2006
Return-path: <git-owner@vger.kernel.org>
Envelope-to: gcvg-git@gmane.org
Received: from vger.kernel.org ([209.132.176.167])
	by ciao.gmane.org with esmtp (Exim 4.43)
	id 1FBgaG-00072h-1I
	for gcvg-git@gmane.org; Wed, 22 Feb 2006 00:06:17 +0100
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751194AbWBUXGN (ORCPT <rfc822;gcvg-git@m.gmane.org>);
	Tue, 21 Feb 2006 18:06:13 -0500
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S1751200AbWBUXGN
	(ORCPT <rfc822;git-outgoing>); Tue, 21 Feb 2006 18:06:13 -0500
Received: from theworths.org ([217.160.253.102]:63627 "EHLO theworths.org")
	by vger.kernel.org with ESMTP id S1751194AbWBUXGM (ORCPT
	<rfc822;git@vger.kernel.org>); Tue, 21 Feb 2006 18:06:12 -0500
Received: (qmail 13007 invoked from network); 21 Feb 2006 18:06:10 -0500
Received: from localhost (HELO raht.cworth.org) (127.0.0.1)
  by localhost with SMTP; 21 Feb 2006 18:06:10 -0500
To: Krzysiek Pawlik <krzysiek.pawlik@people.pl>
In-Reply-To: <87slqcs4y5.wl%cworth@cworth.org>
User-Agent: Wanderlust/2.14.0 (Africa) Emacs/21.4 Mule/5.0 (SAKAKI)
Sender: git-owner@vger.kernel.org
Precedence: bulk
X-Mailing-List: git@vger.kernel.org
Archived-At: <http://permalink.gmane.org/gmane.comp.version-control.git/16573>

--pgp-sign-Multipart_Tue_Feb_21_15:04:51_2006-1
Content-Type: text/plain; charset=US-ASCII

This adds a git-rm command which provides convenience similar to
git-add, (and a bit more since it takes care of the rm as well if
given -f).

Like git-add, git-rm expands the given path names through
git-ls-files. This means it only acts on files listed in the
index. And it does act recursively on directories by default, (no -r
needed as in the case of rm itself). When it recurses, it does not
remove empty directories that are left behind.

---

 On Tue, 21 Feb 2006 14:49:22 -0800, Carl Worth wrote:
 > If the -f option is desired we could get the correct behavior by using
 > update-index --force-remove when not given -f and update-index
 > --remove when given -f.

 One good argument for having the -f behavior is that this way
 "git rm file" makes a good complement for "git add file". I know that
 someone (recently?) asked on the list for an "unadd" operation. This
 would definitely be a lot more convenient than "git update-index
 --force-remove file".

 > That's enough complexity to warrant a test case. I'll be back shortly
 > with that...

 Here it is. This is a complete patch from master, rather than
 the incremental version that's in my tree.

 .gitignore               |    1
 Documentation/git-rm.txt |   89
 +++++++++++++++++++++++++++++++++++++++++++++++
 Makefile                 |    2 -
 git-rm.sh                |   67 +++++++++++++++++++++++++++++++++++
 t/t3600-rm.sh            |   42 ++++++++++++++++++++++
 5 files changed, 200 insertions(+), 1 deletion(-)

diff --git a/.gitignore b/.gitignore
index d7e8d2a..94f66d5 100644
--- a/.gitignore
+++ b/.gitignore
@@ -84,6 +84,7 @@ git-resolve
 git-rev-list
 git-rev-parse
 git-revert
+git-rm
 git-send-email
 git-send-pack
 git-sh-setup
diff --git a/Documentation/git-rm.txt b/Documentation/git-rm.txt
new file mode 100644
index 0000000..401bfb2
--- /dev/null
+++ b/Documentation/git-rm.txt
@@ -0,0 +1,89 @@
+git-rm(1)
+=========
+
+NAME
+----
+git-rm - Remove files from the working tree and from the index.
+
+SYNOPSIS
+--------
+'git-rm' [-f] [-n] [-v] [--] <file>...
+
+DESCRIPTION
+-----------
+A convenience wrapper for git-update-index --remove. For those coming
+from cvs, git-rm provides an operation similar to "cvs rm" or "cvs
+remove".
+
+
+OPTIONS
+-------
+<file>...::
+	Files to remove from the index and optionally, from the
+	working tree as well.
+
+-f::
+	Remove files from the working tree as well as from the index.
+
+-n::
+        Don't actually remove the file(s), just show if they exist in
+        the index.
+
+-v::
+        Be verbose.
+
+--::
+	This option can be used to separate command-line options from
+	the list of files, (useful when filenames might be mistaken
+	for command-line options).
+
+
+DISCUSSION
+----------
+
+The list of <file> given to the command is fed to `git-ls-files`
+command to list files that are registered in the index and
+are not ignored/excluded by `$GIT_DIR/info/exclude` file or
+`.gitignore` file in each directory.  This means two things:
+
+. You can put the name of a directory on the command line, and the
+  command will remove all files in it and its subdirectories (the
+  directories themselves are never removed from the working tree);
+
+. Giving the name of a file that is not in the index does not
+  remove that file.
+
+
+EXAMPLES
+--------
+git-rm Documentation/\\*.txt::
+
+	Removes all `\*.txt` files from the index that are under the
+	`Documentation` directory and any of its subdirectories. The
+	files are not removed from the working tree.
++
+Note that the asterisk `\*` is quoted from the shell in this
+example; this lets the command include the files from
+subdirectories of `Documentation/` directory.
+
+git-rm -f git-*.sh::
+
+	Remove all git-*.sh scripts that are in the index. The files
+	are removed from the index, and (because of the -f option),
+	from the working tree as well. Because this example lets the
+	shell expand the asterisk (i.e. you are listing the files
+	explicitly), it does not remove `subdir/git-foo.sh`.
+
+
+Author
+------
+Written by Linus Torvalds <torvalds@osdl.org>
+
+Documentation
+--------------
+Documentation by Junio C Hamano and the git-list <git@vger.kernel.org>.
+
+GIT
+---
+Part of the gitlink:git[7] suite
+
diff --git a/Makefile b/Makefile
index 317be3c..e98b056 100644
--- a/Makefile
+++ b/Makefile
@@ -109,7 +109,7 @@ SCRIPT_SH = \
 	git-merge-one-file.sh git-parse-remote.sh \
 	git-prune.sh git-pull.sh git-push.sh git-rebase.sh \
 	git-repack.sh git-request-pull.sh git-reset.sh \
-	git-resolve.sh git-revert.sh git-sh-setup.sh \
+	git-resolve.sh git-revert.sh git-rm.sh git-sh-setup.sh \
 	git-tag.sh git-verify-tag.sh git-whatchanged.sh \
 	git-applymbox.sh git-applypatch.sh git-am.sh \
 	git-merge.sh git-merge-stupid.sh git-merge-octopus.sh \
diff --git a/git-rm.sh b/git-rm.sh
new file mode 100644
index 0000000..0a3f546
--- /dev/null
+++ b/git-rm.sh
@@ -0,0 +1,67 @@
+#!/bin/sh
+
+USAGE='[-f] [-n] [-v] [--] <file>...'
+SUBDIRECTORY_OK='Yes'
+. git-sh-setup
+
+index_remove_option=--force-remove
+remove_files=
+show_only=
+verbose=
+while : ; do
+  case "$1" in
+    -f)
+	remove_files=true
+	index_remote_option=--force
+	;;
+    -n)
+	show_only=true
+	;;
+    -v)
+	verbose=--verbose
+	;;
+    --)
+	shift; break
+	;;
+    -*)
+	usage
+	;;
+    *)
+	break
+	;;
+  esac
+  shift
+done
+
+# This is typo-proofing. If some paths match and some do not, we want
+# to do nothing.
+case "$#" in
+0)	;;
+*)
+	git-ls-files --error-unmatch -- "$@" >/dev/null || {
+		echo >&2 "Maybe you misspelled it?"
+		exit 1
+	}
+	;;
+esac
+
+files=$(
+    if test -f "$GIT_DIR/info/exclude" ; then
+	git-ls-files \
+	    --exclude-from="$GIT_DIR/info/exclude" \
+	    --exclude-per-directory=.gitignore -- "$@"
+    else
+	git-ls-files \
+	--exclude-per-directory=.gitignore -- "$@"
+    fi | sort | uniq
+)
+
+case "$show_only" in
+true)
+	echo $files
+	;;
+*)
+	[[ "$remove_files" = "true" ]] && rm -- $files
+	git-update-index $index_remove_option $verbose $files
+	;;
+esac
diff --git a/t/t3600-rm.sh b/t/t3600-rm.sh
new file mode 100755
index 0000000..8415732
--- /dev/null
+++ b/t/t3600-rm.sh
@@ -0,0 +1,42 @@
+#!/bin/sh
+#
+# Copyright (c) 2006 Carl D. Worth
+#
+
+test_description='Test of the various options to git-rm.'
+
+. ./test-lib.sh
+
+# Setup some files to be removed
+touch foo bar
+git-add foo bar
+# Need one to test --
+touch -- -q
+git update-index --add -- -q
+git-commit -m "add foo, bar, and -q"
+
+test_expect_success \
+    'Pre-check that foo is in index before git-rm foo' \
+    'git-ls-files --error-unmatch foo'
+
+test_expect_success \
+    'Test that git-rm foo succeeds' \
+    'git-rm foo'
+
+test_expect_failure \
+    'Post-check that foo is not in index after git-rm foo' \
+    'git-ls-files --error-unmatch foo'
+
+test_expect_success \
+    'Test that "git-rm -f bar" works' \
+    'git-rm -f bar'
+
+test_expect_failure \
+    'Post-check that bar no longer exists' \
+    '[ -f bar ]'
+
+test_expect_success \
+    'Test that "git-rm -- -q" works to delete a file named -q' \
+    'git-rm -- -q'
+
+test_done

--pgp-sign-Multipart_Tue_Feb_21_15:04:51_2006-1
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)

iD8DBQBD+5yT6JDdNq8qSWgRAsMUAJ0aemKo6ow1EvPgvQb+wWmk1/izzQCghmQ2
8uuZEBWvc8vVRfFuEXIyij4=
=l7I+
-----END PGP SIGNATURE-----

--pgp-sign-Multipart_Tue_Feb_21_15:04:51_2006-1--
