From: Junio C Hamano <gitster@pobox.com>
Subject: Re: keeping track of what a branch is for
Date: Thu, 19 Mar 2009 12:46:50 -0700
Message-ID: <7vr60t8fdh.fsf@gitster.siamese.dyndns.org>
References: <3a69fa7c0903191036u24bbf613had88dbebb24335c4@mail.gmail.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Cc: git@vger.kernel.org
To: E R <pc88mxer@gmail.com>
X-From: git-owner@vger.kernel.org Thu Mar 19 20:50:05 2009
Return-path: <git-owner@vger.kernel.org>
Envelope-to: gcvg-git-2@gmane.org
Received: from vger.kernel.org ([209.132.176.167])
	by lo.gmane.org with esmtp (Exim 4.50)
	id 1LkOFf-0003ae-QD
	for gcvg-git-2@gmane.org; Thu, 19 Mar 2009 20:50:04 +0100
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1761249AbZCSTrA (ORCPT <rfc822;gcvg-git-2@m.gmane.org>);
	Thu, 19 Mar 2009 15:47:00 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S1761244AbZCSTq7
	(ORCPT <rfc822;git-outgoing>); Thu, 19 Mar 2009 15:46:59 -0400
Received: from a-sasl-quonix.sasl.smtp.pobox.com ([208.72.237.25]:62934 "EHLO
	sasl.smtp.pobox.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1761160AbZCSTq5 (ORCPT <rfc822;git@vger.kernel.org>);
	Thu, 19 Mar 2009 15:46:57 -0400
Received: from localhost.localdomain (unknown [127.0.0.1])
	by a-sasl-quonix.sasl.smtp.pobox.com (Postfix) with ESMTP id A20107C92;
	Thu, 19 Mar 2009 15:46:54 -0400 (EDT)
Received: from pobox.com (unknown [68.225.240.211]) (using TLSv1 with cipher
 DHE-RSA-AES128-SHA (128/128 bits)) (No client certificate requested) by
 a-sasl-quonix.sasl.smtp.pobox.com (Postfix) with ESMTPSA id 0590F7C91; Thu,
 19 Mar 2009 15:46:51 -0400 (EDT)
In-Reply-To: <3a69fa7c0903191036u24bbf613had88dbebb24335c4@mail.gmail.com>
 (E. R.'s message of "Thu, 19 Mar 2009 12:36:44 -0500")
User-Agent: Gnus/5.110006 (No Gnus v0.6) Emacs/21.4 (gnu/linux)
X-Pobox-Relay-ID: B2F691DA-14BE-11DE-A9F6-C5D912508E2D-77302942!a-sasl-quonix.pobox.com
Sender: git-owner@vger.kernel.org
Precedence: bulk
List-ID: <git.vger.kernel.org>
X-Mailing-List: git@vger.kernel.org
Archived-At: <http://permalink.gmane.org/gmane.comp.version-control.git/113812>

E R <pc88mxer@gmail.com> writes:

> Ok - here's another one...
>
> I've started to create a lot of branches (like one per feature I'm
> working on), but I'm starting to have trouble keeping track of what
> each branch is for. Also, I'd like to keep track of a todo list for
> each branch.

I have to admit that I do face this exact problem in managing git.git
itself, which is an example of a topic-heavy project management, and I
cannot say I have managed to solve it within the canned set of tools git
gives, but the workflow I established makes it manageable, and it consists
of three ingredients:

 (1) Name your (eh, "my") branch just like you name your function.

     You probably learned in programming 101 course the importance of
     giving a good name to your functions.  The same principle applies.
     When I see kb/checkout-optim branch, I know it is about optimizing
     the checkout command, and it came from Kjetil Barvik.  I can tell
     that jc/maint-1.6.0-read-tree-overlay is about the bugfix to the
     "overlay" feature of read-tree command, and the fix would apply as
     far back as the 1.6.0.X series, not just the current maintenance.

 (2) I also use a few custom scripts (Meta/WC, Meta/git-topic.perl and
     Meta/UWC) to manage "What's cooking" messages you see on the list.
     Probably some of the computations git-topic.perl does can be more
     generalized (it currently relies on the convention to name topic
     branches with a slash in their names, and you have up to three
     integration branches such as master, next and pu).

     After accumulating new patches on top of topics and merging more
     topics to integration branches (such as master and next), I run
     Meta/WC which in turn runs Meta/UWC to read the last issue of "What's
     cooking", and the raw material that should go in the next issue of
     the message (generated by Meta/git-topic.perl), and the comments on
     each topic in the last issue is merged to produce the draft of the
     next issue.  I add further text to it to describe new deveolopment to
     existing topics and comment on new topics before sending it out, and
     another cycle begins.

 (3) I also have a custom script Meta/GRADUATED to cull topic branches
     that have been merged to their final destination, and list possible
     backporting for older maintenance series.
