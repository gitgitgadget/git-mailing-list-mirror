Return-Path: <git-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on dcvr.yhbt.net
X-Spam-Level: 
X-Spam-ASN: AS31976 209.132.180.0/23
X-Spam-Status: No, score=-4.0 required=3.0 tests=BAYES_00,
	HEADER_FROM_DIFFERENT_DOMAINS,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI
	shortcircuit=no autolearn=ham autolearn_force=no version=3.4.0
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by dcvr.yhbt.net (Postfix) with ESMTP id 45DC11F424
	for <e@80x24.org>; Fri, 20 Apr 2018 10:11:23 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1754399AbeDTKLV (ORCPT <rfc822;e@80x24.org>);
        Fri, 20 Apr 2018 06:11:21 -0400
Received: from relaya.standardlife.com ([193.138.107.173]:11534 "EHLO
        relaya.standardlife.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1754306AbeDTKLU (ORCPT <rfc822;git@vger.kernel.org>);
        Fri, 20 Apr 2018 06:11:20 -0400
From:   Andrew Ducker <andrew_ducker@standardlife.com>
To:     'Bryan Turner' <bturner@atlassian.com>
CC:     "git@vger.kernel.org" <git@vger.kernel.org>
Subject: RE: Bug Report - Pull remote branch does not retrieve new tags
Thread-Topic: Bug Report - Pull remote branch does not retrieve new tags
Thread-Index: AdPX5XNOymz7t1oeS5WHVE1MIFeBEQAPe58AABr5IHA=
Date:   Fri, 20 Apr 2018 10:11:07 +0000
Message-ID: <f41243c52aff4001801d58dee1c5ccb6@standardlife.com>
References: <adc410f016e8405fb81fa92e45675e2a@standardlife.com>
 <CAGyf7-G7GDX6DtpAqQvQ-8Rwad1VS6_xdDw_Rt_p5kT-C7dFZA@mail.gmail.com>
In-Reply-To: <CAGyf7-G7GDX6DtpAqQvQ-8Rwad1VS6_xdDw_Rt_p5kT-C7dFZA@mail.gmail.com>
Accept-Language: en-GB, en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [172.31.85.137]
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
MIME-Version: 1.0
X-CFilter-Loop: Reflected
Sender: git-owner@vger.kernel.org
Precedence: bulk
List-ID: <git.vger.kernel.org>
X-Mailing-List: git@vger.kernel.org

VGhhbmtzIEJyeWFuLCB0aGF0IGRvZXMgY2xlYXIgaXQgdXAgYSBiaXQuDQoNClRoZSByZWFzb24g
dGhhdCB0aGlzIGNhbWUgdXAgaXMgdGhhdCBWaXN1YWwgU3R1ZGlvIENvZGUgaGFzIHN3aXRjaGVk
IGZyb20gImdpdCBwdWxsIiB0byAiZ2l0IHB1bGwgcmVtb3RlIGJyYW5jaCIgd2hlbiB0aGUgInN5
bmMiIGJ1dHRvbiBpcyBjbGlja2VkLCBhbmQgdGhpcyBoYXMgbWVhbnQgdGhhdCB0YWdzIGFyZSBu
byBsb25nZXIgYmVpbmcgZmV0Y2hlZC4NCg0KV2hhdCBfZG9lc18gc2VlbSB0byB3b3JrIGlzIGFk
ZGluZyAiLS10YWdzIiBvbiB0aGUgZW5kIG9mIHRoZSBnaXQgcHVsbC4gIEJ1dCB0aGlzIGlzbid0
IGFjdHVhbGx5IGluIHRoZSBkb2N1bWVudGF0aW9uWzFdLCBhbmQgSSdtIGEgYml0IG5lcnZvdXMg
dGhhdCB0aGlzIGlzIG1pZC1kZXByZWNhdGlvbi4NCg0KSXMgIi0tdGFncyIgZ29pbmcgYXdheSBz
aG9ydGx5PyAgT3IgYXJlIHRoZXkgb2sgdG8gZGVwZW5kIG9uIHRoaXM/DQoNClRoZSBidWcgaXMg
YXQgaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC92c2NvZGUvaXNzdWVzLzQ4MjExIGlmIGFu
eW9uZSB3YW50cyB0byBjaGltZSBpbiB3aXRoIGFkdmljZSBvdmVyIHRoZXJlIDotKQ0KDQpUaGFu
a3MsDQoNCkFuZHkNCg0KPiAtLS0tLU9yaWdpbmFsIE1lc3NhZ2UtLS0tLQ0KPiBGcm9tOiBCcnlh
biBUdXJuZXIgW21haWx0bzpidHVybmVyQGF0bGFzc2lhbi5jb21dDQo+IFNlbnQ6IDE5IEFwcmls
IDIwMTggMjM6MTQNCj4gVG86IEFuZHJldyBEdWNrZXINCj4gQ2M6IGdpdEB2Z2VyLmtlcm5lbC5v
cmcNCj4gU3ViamVjdDogUmU6IEJ1ZyBSZXBvcnQgLSBQdWxsIHJlbW90ZSBicmFuY2ggZG9lcyBu
b3QgcmV0cmlldmUgbmV3IHRhZ3MNCj4NCj4gQW5kcmV3LA0KPg0KPiBPbiBUaHUsIEFwciAxOSwg
MjAxOCBhdCA2OjU1IEFNLCBBbmRyZXcgRHVja2VyDQo+IDxhbmRyZXdfZHVja2VyQHN0YW5kYXJk
bGlmZS5jb20+IHdyb3RlOg0KPiA+DQo+ID4gV2hhdCBoYXBwZW5zOg0KPiA+IFdoZW4gSSBjcmVh
dGUgYSBuZXcgdGFnIG9uIHRoZSByZW1vdGUgKGNoYW5naW5nIG5vdGhpbmcgZWxzZSkNCj4gPiAi
Z2l0IHB1bGwgb3JpZ2luIG1hc3RlciIgcHJvZHVjZXMgdGhlIGZvbGxvd2luZzoNCj4gPiAgIEZy
b20gZ2l0LmludGVybmFsLmNvbXBhbnkuY29tOnRlYW0vdGVzdHJlcG8NCj4gPiAgICAqIGJyYW5j
aCAgICAgICAgICAgIG1hc3RlciAgICAgLT4gRkVUQ0hfSEVBRA0KPiA+ICAgQWxyZWFkeSB1cC10
by1kYXRlLg0KPiA+DQo+ID4gSWYgSSBpbnN0ZWFkIGRvIGEgImdpdCBwdWxsIiBJIGdldDoNCj4g
PiAgIEZyb20gZ2l0LmludGVybmFsLmNvbXBhbnkuY29tOnRlYW0vdGVzdHJlcG8NCj4gPiAgICAq
IFtuZXcgdGFnXSAgICAgICAgIFRlc3RpbmcxMSAgLT4gVGVzdGluZzExDQo+ID4gICBBbHJlYWR5
IHVwLXRvLWRhdGUuDQo+ID4NCj4gPiBXaGF0IEkgdGhpbmsgc2hvdWxkIGhhcHBlbjoNCj4gPiBU
aGUgImdpdCBwdWxsIG9yaWdpbiBtYXN0ZXIiIHNob3VsZCByZXRyaWV2ZSB0aGUgdGFnLg0KPiA+
DQo+ID4gVGhpcyBpcyB3aXRoIDIuMTYuMi53aW5kb3dzLjEsIGJ1dCBhbHNvIG9jY3VycmVkIG9u
IG15IHByZXZpb3VzbHkgaW5zdGFsbGVkDQo+IHZlcnNpb24gKDIuMTIuMi53aW5kb3dzLjIpDQo+
ID4NCj4gPiBNeSB1bmRlcnN0YW5kaW5nIGlzIHRoYXQgImdpdCBwdWxsIiBhbmQgImdpdCBwdWxs
ICRyZXBvICRjdXJyZW50YnJhbmNoIg0KPiBzaG91bGQgZnVuY3Rpb24gaWRlbnRpY2FsbHkuDQo+
ID4NCj4gPiBJcyB0aGlzIGEgYnVnLCBvciBhbSBJIG1pc3VuZGVyc3RhbmRpbmcgdGhlIG1hbnVh
bCBwYWdlPw0KPg0KPiBMb29rcyBsaWtlIGEgbWlzdW5kZXJzdGFuZGluZywgdG8gbWUuIFBlcmhh
cHMgSSBjYW4gaGVscCBjbGFyaWZ5Lg0KPg0KPiAiZ2l0IHB1bGwiIHdpdGhvdXQgYXJndW1lbnRz
IGZldGNoZXMgZnJvbSB0aGUgIm9yaWdpbiIgcmVwb3NpdG9yeQ0KPiB1c2luZyB0aGUgY29uZmln
dXJlZCAiZmV0Y2giIHJlZnNwZWNzLCB3aGljaCB0eXBpY2FsbHkgbG9va3Mgc29tZXRoaW5nDQo+
IGxpa2UgImZldGNoID0gK3JlZnMvaGVhZHMvKjpyZWZzL3JlbW90ZXMvb3JpZ2luLyoiLiBJdCBf
ZG9lc24ndF8NCj4gYWN0dWFsbHkgZmV0Y2ggYWxsIHRhZ3MsIGJ1dCBhbnkgdGFnIHJlZmVyZW5j
aW5nIGFueSBvYmplY3QvY29tbWl0DQo+IGluY2x1ZGVkIGluIHRoZSBicmFuY2hlcyBpcyBicm91
Z2h0IGFsb25nIGZvciB0aGUgcmlkZS4gVGhpcyBpcw0KPiBkb2N1bWVudGVkIG9uICJnaXQgcHVs
bCI6DQo+DQo+IC0tbm8tdGFncw0KPg0KPiAgICAgQnkgZGVmYXVsdCwgdGFncyB0aGF0IHBvaW50
IGF0IG9iamVjdHMgdGhhdCBhcmUgZG93bmxvYWRlZCBmcm9tDQo+IHRoZSByZW1vdGUgcmVwb3Np
dG9yeSBhcmUgZmV0Y2hlZCBhbmQgc3RvcmVkIGxvY2FsbHkuIFRoaXMgb3B0aW9uDQo+IGRpc2Fi
bGVzIHRoaXMgYXV0b21hdGljIHRhZyBmb2xsb3dpbmcuIFRoZSBkZWZhdWx0IGJlaGF2aW9yIGZv
ciBhDQo+IHJlbW90ZSBtYXkgYmUgc3BlY2lmaWVkIHdpdGggdGhlIHJlbW90ZS48bmFtZT4udGFn
T3B0IHNldHRpbmcuIFNlZQ0KPiBnaXQtY29uZmlnKDEpLg0KPg0KPiBCeSBjb21wYXJpc29uLCBv
biB5b3VyICJnaXQgcHVsbCAkcmVwbyAkY3VycmVudEJyYW5jaCIsIHdoYXQgeW91J3JlDQo+IGNh
bGxpbmcgIiRjdXJyZW50QnJhbmNoIiBpcyBhY3R1YWxseSAiWzxyZWZzcGVjPi4uLl0iIGZyb20g
dGhlDQo+IGRvY3VtZW50YXRpb24uIEluIG90aGVyIHdvcmRzLCBieSBwYXNzaW5nICJtYXN0ZXIi
LCB5b3UndmUgdG9sZCAiZ2l0DQo+IHB1bGwiIHRvIGZldGNoIF9ub3RoaW5nIGJ1dCAibWFzdGVy
Il8sIGlnbm9yaW5nIHRoZSBjb25maWd1cmVkDQo+IHJlZnNwZWMocykuIEFkZGl0aW9uYWxseSwg
c2luY2UgeW91IGhhdmVuJ3QgdG9sZCAiZ2l0IHB1bGwiIHdoZXJlIHRvDQo+IF9wdXRfICJtYXN0
ZXIiIG9uY2UgaXQncyBmZXRjaGVkLCBpdCB3cml0ZXMgaXQgdG8gIkZFVENIX0hFQUQiLiBJZiB5
b3UNCj4gaGF2ZSBhIHRyYWNraW5nIGJyYW5jaCBzZXR1cCwgImdpdCBwdWxsIG9yaWdpbiBtYXN0
ZXIiIHdpbGwgYWxzbw0KPiB1cGRhdGUgdGhlIHRyYWNraW5nIGJyYW5jaC4gRm9yIGV4YW1wbGUs
IHRoZSBzYW1lIGNvbW1hbmQgZm9yIG1lDQo+IHByb2R1Y2VzOg0KPg0KPiAkIGdpdCBwdWxsIG9y
aWdpbiBtYXN0ZXINCj4gRnJvbSAuLi4NCj4gICogYnJhbmNoICAgICAgICAgICAgICAgICAgICBt
YXN0ZXIgICAgIC0+IEZFVENIX0hFQUQNCj4gICAgYWNhNWViMGZlZjUuLmFkNDg0NDc3NTA4ICBt
YXN0ZXIgICAgIC0+IG9yaWdpbi9tYXN0ZXINCj4NCj4gQXMgeW91IGNhbiBzZWUsIGJvdGggRkVU
Q0hfSEVBRCBhbmQgb3JpZ2luL21hc3RlciB3ZXJlIHVwZGF0ZWQsIHNpbmNlDQo+IG15IGxvY2Fs
ICJtYXN0ZXIiIHRyYWNrcyAib3JpZ2luIidzICJtYXN0ZXIiOg0KPg0KPiBbYnJhbmNoICJtYXN0
ZXIiXQ0KPiAgICAgICAgIHJlbW90ZSA9IG9yaWdpbg0KPiAgICAgICAgIG1lcmdlID0gcmVmcy9o
ZWFkcy9tYXN0ZXINCj4NCj4gSG9wZSB0aGlzIGhlbHBzIQ0KPiBCcnlhbg0KQ29uZmlkZW50aWFs
aXR5IC0gVGhpcyBlbWFpbCBpcyBjb25maWRlbnRpYWwuDQpOb3QgbWVhbnQgZm9yIHlvdT8gLSBJ
ZiB5b3UgZG9uJ3QgdGhpbmsgdGhpcyBlbWFpbCBpcyBtZWFudCBmb3IgeW91LCBwbGVhc2UgbGV0
IHVzIGtub3cuIERvIG5vdCBjb3B5IG9yIGZvcndhcmQgdGhlIGluZm9ybWF0aW9uIGl0IGNvbnRh
aW5zLCBhbmQgZGVsZXRlIHRoaXMgZW1haWwgZnJvbSB5b3VyIHN5c3RlbS4NClZpZXdzIGV4cHJl
c3NlZCAtIEFueSBwZXJzb25hbCB2aWV3cyBvciBvcGluaW9ucyBleHByZXNzZWQgaW4gdGhpcyBl
bWFpbCBhcmUgdGhlIHNlbmRlcidzLCBhbmQgZG8gbm90IG5lY2Vzc2FyaWx5IHJlZmxlY3QgdGhl
IHZpZXdzIG9mIFN0YW5kYXJkIExpZmUgQWJlcmRlZW4gZ3JvdXAuDQpNb25pdG9yaW5nIC0gV2Ug
ZmlsdGVyIGFuZCBtb25pdG9yIGVtYWlscyB0byBwcm90ZWN0IG91ciBzeXN0ZW1zIGFuZCB0byBr
ZWVwIHRoZW0gcnVubmluZyBzbW9vdGhseS4NCkVtYWlsaW5nIHVzIC0gRW1haWwgaXNuJ3QgYSBz
ZWN1cmUgZm9ybSBvZiBjb21tdW5pY2F0aW9uLiBJZiB5b3Ugd2FudCB0byBzZW5kIHVzIGNvbmZp
ZGVudGlhbCBpbmZvcm1hdGlvbiBwbGVhc2Ugc2VuZCBpdCBieSBwb3N0LiBIb3dldmVyLCBpZiB5
b3UgZG8gY29tbXVuaWNhdGUgd2l0aCB1cyBieSBlbWFpbCBvbiBhbnkgc3ViamVjdCwgeW91IGFy
ZSBnaXZpbmcgdXMgcGVybWlzc2lvbiB0byBlbWFpbCB5b3UgYmFjay4NClBob25pbmcgdXMgLSBD
YWxscyBtYXkgYmUgbW9uaXRvcmVkIGFuZC9vciByZWNvcmRlZCB0byBwcm90ZWN0IGJvdGggeW91
IGFuZCB1cyBhbmQgaGVscCB3aXRoIG91ciB0cmFpbmluZy4gQ2FsbCBjaGFyZ2VzIHdpbGwgdmFy
eS4NClN0YW5kYXJkIExpZmUgQWJlcmRlZW4gZ3JvdXAgLSBTdGFuZGFyZCBMaWZlIEFiZXJkZWVu
IGdyb3VwIGNvbXByaXNlcyBTdGFuZGFyZCBMaWZlIEFiZXJkZWVuIHBsYyBhbmQgaXRzIHN1YnNp
ZGlhcmllcy4gRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gU3RhbmRhcmQgTGlmZSBBYmVyZGVlbiBn
cm91cCB2aXNpdCBvdXIgd2Vic2l0ZSBodHRwOi8vd3d3LnN0YW5kYXJkbGlmZWFiZXJkZWVuLmNv
bS8uDQpTdGFuZGFyZCBMaWZlIEFiZXJkZWVuIHBsYyAoU0MyODY4MzIpLCBTdGFuZGFyZCBMaWZl
IEFzc3VyYW5jZSBMaW1pdGVkIChTQzI4NjgzMykgYW5kIFN0YW5kYXJkIExpZmUgRW1wbG95ZWUg
U2VydmljZXMgTGltaXRlZCAoU0MyNzEzNTUpIGFyZSBhbGwgcmVnaXN0ZXJlZCBpbiBTY290bGFu
ZCBhdCBTdGFuZGFyZCBMaWZlIEhvdXNlLCAzMCBMb3RoaWFuIFJvYWQsIEVkaW5idXJnaCBFSDEg
MkRILiBTdGFuZGFyZCBMaWZlIEFzc3VyYW5jZSBMaW1pdGVkIGlzIGF1dGhvcmlzZWQgYnkgdGhl
IFBydWRlbnRpYWwgUmVndWxhdGlvbiBBdXRob3JpdHkgYW5kIHJlZ3VsYXRlZCBieSB0aGUgRmlu
YW5jaWFsIENvbmR1Y3QgQXV0aG9yaXR5IGFuZCB0aGUgUHJ1ZGVudGlhbCBSZWd1bGF0aW9uIEF1
dGhvcml0eS4NCkZvciBtb3JlIGluZm9ybWF0aW9uIG9uIFN0YW5kYXJkIExpZmUgQXNzdXJhbmNl
IGxpbWl0ZWQgdmlzaXQgb3VyIHdlYnNpdGUgaHR0cDovL3d3dy5zdGFuZGFyZGxpZmUuY28udWsN
Cg==
