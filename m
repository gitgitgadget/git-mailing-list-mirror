From: Yasushi SHOJI <yashi@atmark-techno.com>
Subject: [PATCH] clone: the given repository dir should be relative to $PWD
Date: Sat, 14 Oct 2006 21:02:51 +0900
Message-ID: <87ac3zqebs.wl@mail2.atmark-techno.com>
Mime-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
X-From: git-owner@vger.kernel.org Sat Oct 14 14:20:19 2006
Return-path: <git-owner@vger.kernel.org>
Envelope-to: gcvg-git@gmane.org
Received: from vger.kernel.org ([209.132.176.167])
	by ciao.gmane.org with esmtp (Exim 4.43)
	id 1GYiUz-0004xa-Vf
	for gcvg-git@gmane.org; Sat, 14 Oct 2006 14:20:18 +0200
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932235AbWJNMUN (ORCPT <rfc822;gcvg-git@m.gmane.org>);
	Sat, 14 Oct 2006 08:20:13 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S932240AbWJNMUM
	(ORCPT <rfc822;git-outgoing>); Sat, 14 Oct 2006 08:20:12 -0400
Received: from shop.atmark-techno.com ([210.191.215.173]:43191 "EHLO
	mail2.atmark-techno.com") by vger.kernel.org with ESMTP
	id S932235AbWJNMUK (ORCPT <rfc822;git@vger.kernel.org>);
	Sat, 14 Oct 2006 08:20:10 -0400
Received: from localhost.atmark-techno.com (dns1.atmark-techno.com [210.191.215.170])
	by mail2.atmark-techno.com (Postfix) with ESMTP id 8B5EB2B2B6;
	Sat, 14 Oct 2006 21:20:07 +0900 (JST)
To: git@vger.kernel.org
User-Agent: Wanderlust/2.14.0
Sender: git-owner@vger.kernel.org
Precedence: bulk
X-Mailing-List: git@vger.kernel.org
Archived-At: <http://permalink.gmane.org/gmane.comp.version-control.git/28875>

the repository argument for git-clone should be relative to $PWD
instead of the given target directory.  The old behavior gave us
surprising success and you need a few minute to know why it worked.

GIT_DIR is already exported so no need to cd into $D. And this makes
$PWD for git-fetch-pack, which is the actual command to take the given
repository dir, the same as git-clone.

Signed-off-by: Yasushi SHOJI <yashi@atmark-techno.com>
---

While I'm not sure this is a feature we rely on or not, and I don't
want to change the way people work, IMHO the old behaviour isn't
appropriate for such higher level porcelain.

The patch should be for post 1.4.3.


 git-clone.sh                  |    2 +-
 t/t5600-clone-fail-cleanup.sh |    6 ++++++
 2 files changed, 7 insertions(+), 1 deletions(-)

diff --git a/git-clone.sh b/git-clone.sh
index 3998c55..bf54a11 100755
--- a/git-clone.sh
+++ b/git-clone.sh
@@ -312,7 +312,7 @@ yes,yes)
 		fi
 		;;
 	*)
-		cd "$D" && case "$upload_pack" in
+		case "$upload_pack" in
 		'') git-fetch-pack --all -k $quiet "$repo" ;;
 		*) git-fetch-pack --all -k $quiet "$upload_pack" "$repo" ;;
 		esac >"$GIT_DIR/CLONE_HEAD" || {
diff --git a/t/t5600-clone-fail-cleanup.sh b/t/t5600-clone-fail-cleanup.sh
index 0c6a363..041be04 100755
--- a/t/t5600-clone-fail-cleanup.sh
+++ b/t/t5600-clone-fail-cleanup.sh
@@ -25,6 +25,12 @@ test_create_repo foo
 # clone doesn't like it if there is no HEAD. Is that a bug?
 (cd foo && touch file && git add file && git commit -m 'add file' >/dev/null 2>&1)
 
+# source repository given to git-clone should be relative to the
+# current path not to the target dir
+test_expect_failure \
+    'clone of non-existent (relative to $PWD) source should fail' \
+    'git-clone ../foo baz'
+
 test_expect_success \
     'clone should work now that source exists' \
     'git-clone foo bar'
-- 
1.4.2.3
