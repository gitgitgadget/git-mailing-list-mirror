From: Carl Worth <cworth@cworth.org>
Subject: [PATCH] git-rm: Fix to properly handle files with spaces, tabs, newlines, etc.
Date: Wed, 22 Feb 2006 16:08:27 -0800
Message-ID: <8764n7rl6s.wl%cworth@cworth.org>
References: <87u0ass7tj.wl%cworth@cworth.org>
	<43FB8F31.9090302@people.pl>
	<87slqcs4y5.wl%cworth@cworth.org>
	<87r75ws48c.wl%cworth@cworth.org>
	<7vaccjst3x.fsf@assigned-by-dhcp.cox.net>
Mime-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: multipart/signed;
 boundary="pgp-sign-Multipart_Wed_Feb_22_16:08:19_2006-1"; micalg=pgp-sha1;
 protocol="application/pgp-signature"
Content-Transfer-Encoding: 7bit
Cc: Krzysiek Pawlik <krzysiek.pawlik@people.pl>, git@vger.kernel.org
X-From: git-owner@vger.kernel.org Thu Feb 23 01:10:13 2006
Return-path: <git-owner@vger.kernel.org>
Envelope-to: gcvg-git@gmane.org
Received: from vger.kernel.org ([209.132.176.167])
	by ciao.gmane.org with esmtp (Exim 4.43)
	id 1FC43P-00056F-Io
	for gcvg-git@gmane.org; Thu, 23 Feb 2006 01:09:56 +0100
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751478AbWBWAJw (ORCPT <rfc822;gcvg-git@m.gmane.org>);
	Wed, 22 Feb 2006 19:09:52 -0500
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S1751479AbWBWAJw
	(ORCPT <rfc822;git-outgoing>); Wed, 22 Feb 2006 19:09:52 -0500
Received: from theworths.org ([217.160.253.102]:9919 "EHLO theworths.org")
	by vger.kernel.org with ESMTP id S1751478AbWBWAJv (ORCPT
	<rfc822;git@vger.kernel.org>); Wed, 22 Feb 2006 19:09:51 -0500
Received: (qmail 15336 invoked from network); 22 Feb 2006 19:09:47 -0500
Received: from localhost (HELO raht.cworth.org) (127.0.0.1)
  by localhost with SMTP; 22 Feb 2006 19:09:47 -0500
To: Junio C Hamano <junkio@cox.net>
In-Reply-To: <7vaccjst3x.fsf@assigned-by-dhcp.cox.net>
User-Agent: Wanderlust/2.14.0 (Africa) Emacs/21.4 Mule/5.0 (SAKAKI)
Sender: git-owner@vger.kernel.org
Precedence: bulk
X-Mailing-List: git@vger.kernel.org
Archived-At: <http://permalink.gmane.org/gmane.comp.version-control.git/16625>

--pgp-sign-Multipart_Wed_Feb_22_16:08:19_2006-1
Content-Type: text/plain; charset=US-ASCII

New tests are added to the git-rm test case to cover this as well.

Signed-off-by: Carl Worth <cworth@cworth.org>

---

On Wed, 22 Feb 2006 00:19:46 -0800, Junio C Hamano wrote:
>
> Note you are not using -z, which means we will c-quote the funny
> characters in the output...

Oh, I didn't expect C-language-style quoting. That's definitely not
going to work.

> > +*)
> > +	[[ "$remove_files" = "true" ]] && rm -- $files
> 
> Same here. What happens to filenames with IFS letters in them?
> "git-add" does not use -z and xargs -0 without a good reason.

Yeah, this is just me unleashing my shell-programming incompetence on
the world.

The attached patch addresses that problem with a rather blunt
hammer. Let me know if anyone has a more elegant approach than what I
did here.

One thing I've lost is that the previous version had a sort|uniq on
the output of git-ls-files which is useful in the case of failed
merges and other ways in which git-ls-files reports the same file
multiple times. What might be nice is a --unique flag to git-ls-files
that git-rm could use, (but on first glance it doesn't look trivial to
implement as git-ls-files doesn't ever store or sort its entire list).

> Even if rm -- $files were quoted correctly, and tried to remove
> the right files, if some of the files failed to disappear for
> whatever reason, what happens?

My intent with the previous patch was that, when git-rm is given -f,
and the rm fails to remove a file, that the file is then not removed
from the index. Of course, this was hopelessly broken due to two major
typos in the same line:

	index_remote_option=--force
instead of:
	index_remove_option=--remove

which my tests were insufficient to catch.

This behavior should now work in the current patch as well as the
proper handling of files with funny characters, (tests are included
for both).

The desired behavior when rm fails is debatable, so I'm open to
opinions. One reason I liked this was that in the previous patch, rm
would prompt the user before deleting a read-only file, and if the
user said no, then git-rm would also not remove it from the index.

This did cause another minor problem in that there would then be no
way to get git-rm to use "rm -f" when desired.

In the current patch, with my blunt hammer, there's another sub-shell
before the rm which apparently steals its tty and causes it to not
prompt at all. So that aspect may be moot.

-Carl

PS. What's the syntax/tool support for just replying to an existing
message, and at the end inserting a patch with its own subject and
commit message? Here I've manually whacked the subject and put the
commit message above my reply (in the style of git-format-patch) but
that seem seems inelegant.

 git-rm.sh     |   37 ++++++++++++++++++++-----------------
 t/t3600-rm.sh |   30 ++++++++++++++++++++++--------
 2 files changed, 42 insertions(+), 25 deletions(-)

3d52c6d60047390d434f8737368adea77fa26310
diff --git a/git-rm.sh b/git-rm.sh
index 0a3f546..fa361bd 100755
--- a/git-rm.sh
+++ b/git-rm.sh
@@ -4,7 +4,6 @@ USAGE='[-f] [-n] [-v] [--] <file>...'
 SUBDIRECTORY_OK='Yes'
 . git-sh-setup
 
-index_remove_option=--force-remove
 remove_files=
 show_only=
 verbose=
@@ -12,7 +11,6 @@ while : ; do
   case "$1" in
     -f)
 	remove_files=true
-	index_remote_option=--force
 	;;
     -n)
 	show_only=true
@@ -45,23 +43,28 @@ case "$#" in
 	;;
 esac
 
-files=$(
-    if test -f "$GIT_DIR/info/exclude" ; then
-	git-ls-files \
-	    --exclude-from="$GIT_DIR/info/exclude" \
-	    --exclude-per-directory=.gitignore -- "$@"
-    else
-	git-ls-files \
+if test -f "$GIT_DIR/info/exclude"
+then
+	git-ls-files -z \
+	--exclude-from="$GIT_DIR/info/exclude" \
 	--exclude-per-directory=.gitignore -- "$@"
-    fi | sort | uniq
-)
-
-case "$show_only" in
-true)
-	echo $files
+else
+	git-ls-files -z \
+	--exclude-per-directory=.gitignore -- "$@"
+fi |
+case "$show_only,remove_files" in
+true,*)
+	xargs -0 echo
+	;;
+*,true)
+	xargs -0 sh -c "
+		while [ \$# -gt 0 ]; do
+			file=\$1; shift
+			rm -- \"\$file\" && git-update-index --remove $verbose \"\$file\"
+		done
+	" inline
 	;;
 *)
-	[[ "$remove_files" = "true" ]] && rm -- $files
-	git-update-index $index_remove_option $verbose $files
+	git-update-index --force-remove $verbose -z --stdin
 	;;
 esac
diff --git a/t/t3600-rm.sh b/t/t3600-rm.sh
index 8415732..b87beb0 100755
--- a/t/t3600-rm.sh
+++ b/t/t3600-rm.sh
@@ -7,13 +7,12 @@ test_description='Test of the various op
 
 . ./test-lib.sh
 
-# Setup some files to be removed
-touch foo bar
-git-add foo bar
-# Need one to test --
-touch -- -q
-git update-index --add -- -q
-git-commit -m "add foo, bar, and -q"
+# Setup some files to be removed, some with funny characters
+touch -- foo bar baz 'space embedded' 'tab	embedded' 'newline
+embedded' -q
+git-add -- foo bar baz 'space embedded' 'tab	embedded' 'newline
+embedded' -q
+git-commit -m "add files"
 
 test_expect_success \
     'Pre-check that foo is in index before git-rm foo' \
@@ -36,7 +35,22 @@ test_expect_failure \
     '[ -f bar ]'
 
 test_expect_success \
-    'Test that "git-rm -- -q" works to delete a file named -q' \
+    'Test that "git-rm -- -q" works to delete a file that looks like an option' \
     'git-rm -- -q'
 
+test_expect_success \
+    "Test that \"git-rm -f\" can remove files with embedded space, tab, or newline characters." \
+    "git-rm 'space embedded' 'tab	embedded' 'newline
+embedded"
+
+chmod u-w .
+test_expect_failure \
+    'Test that "git-rm -f" fails if its rm fails' \
+    'git-rm -f baz'
+chmod u+w .
+
+test_expect_success \
+    'When the rm in "git-rm -f" fails, it should not remove the file from the index' \
+    'git-ls-files --error-unmatch baz'
+
 test_done
-- 
1.2.2.g01a2-dirty



--pgp-sign-Multipart_Wed_Feb_22_16:08:19_2006-1
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)

iD8DBQBD/Pz76JDdNq8qSWgRApB4AJ9oitrsQDUITdz0x5DakeDVO0F4oACgpBtl
VjkbAh/R/xtEYimJlrpDHv0=
=xruk
-----END PGP SIGNATURE-----

--pgp-sign-Multipart_Wed_Feb_22_16:08:19_2006-1--
