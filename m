From: "J. Bruce Fields" <bfields@fieldses.org>
Subject: Re: [PATCH] user-manual: Add section on ignoring files
Date: Tue, 15 May 2007 23:30:32 -0400
Message-ID: <20070516033032.GA20022@fieldses.org>
References: <200705160047.52717.johan@herland.net> <7v1whhis16.fsf@assigned-by-dhcp.cox.net> <200705160231.40486.johan@herland.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Cc: git@vger.kernel.org, Junio C Hamano <junkio@cox.net>,
	"Randal L. Schwartz" <merlyn@stonehenge.com>,
	Jakub Narebski <jnareb@gmail.com>
To: Johan Herland <johan@herland.net>
X-From: git-owner@vger.kernel.org Wed May 16 05:30:43 2007
Return-path: <git-owner@vger.kernel.org>
Envelope-to: gcvg-git@gmane.org
Received: from vger.kernel.org ([209.132.176.167])
	by lo.gmane.org with esmtp (Exim 4.50)
	id 1HoADr-0002Fx-F7
	for gcvg-git@gmane.org; Wed, 16 May 2007 05:30:43 +0200
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754921AbXEPDag (ORCPT <rfc822;gcvg-git@m.gmane.org>);
	Tue, 15 May 2007 23:30:36 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S1755478AbXEPDag
	(ORCPT <rfc822;git-outgoing>); Tue, 15 May 2007 23:30:36 -0400
Received: from mail.fieldses.org ([66.93.2.214]:52869 "EHLO fieldses.org"
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754921AbXEPDag (ORCPT <rfc822;git@vger.kernel.org>);
	Tue, 15 May 2007 23:30:36 -0400
Received: from bfields by fieldses.org with local (Exim 4.67)
	(envelope-from <bfields@fieldses.org>)
	id 1HoADg-0008Cr-TM; Tue, 15 May 2007 23:30:32 -0400
Content-Disposition: inline
In-Reply-To: <200705160231.40486.johan@herland.net>
User-Agent: Mutt/1.5.13 (2006-08-11)
Sender: git-owner@vger.kernel.org
Precedence: bulk
X-Mailing-List: git@vger.kernel.org
Archived-At: <http://permalink.gmane.org/gmane.comp.version-control.git/47408>

On Wed, May 16, 2007 at 02:31:40AM +0200, Johan Herland wrote:
> The todo list at the end of the user manual says that something must be
> said about .gitignore. Also, there seems to be a lack of documentation
> on how to choose between the various types of ignore files (.gitignore
> vs. .git/info/exclude, etc.).

Thanks for doing this!

> --- a/Documentation/user-manual.txt
> +++ b/Documentation/user-manual.txt
> @@ -1188,6 +1188,75 @@ description.  Tools that turn commits into email, for example, use
>  the first line on the Subject line and the rest of the commit in the
>  body.
>  
> +[[ignoring-files]]
> +Ignoring files
> +--------------

This looks like a sensible place to add it....

> +A project will often generate files that you do 'not' want to track with git.
> +This typically includes files generated by a build process or temporary
> +backup files made by your editor. Of course, 'not' tracking files with git
> +is just a matter of 'not' calling "`git add`" on them. But it quickly becomes
> +annoying to have these untracked files lying around; e.g. they make
> +"`git add .`" and "`git commit -a`" practically useless, and they keep
> +showing up in the output of "`git status`", etc.

It might be cute to introduce this with an example; "suppose you just
imported a new project into git, build it, and run git-status.  The
output you get might look like:..." etc.

> +Git therefore provides "exclude patterns" for telling git which files to
> +actively ignore. Exclude patterns are thoroughly explained in the
> +"Exclude Patterns" section of the gitlink:git-ls-files[1] manual page,
> +but the heart of the concept is simply a list of files which git should
> +ignore. Entries in the list may contain globs to specify multiple files,
> +or may be prefixed by "`!`" to explicitly include (un-ignore) a previously
> +excluded (ignored) file (i.e. later exclude patterns override earlier ones).

It might simplify things just to start off by talking about .gitignore
exclusively, rather than talking about exclude patterns in general;
something like: "Git therefore allows you to provide .gitignore files,
which consist of a list of entries, processed in order from top to
bottom, each telling git about some files to ignore...."

Then introduce the other options at the end: "for exclude patterns that
you want to be used just by one repo, or by a group of repos on one
computer, you can use .git/info/exclude or core.excludesfile."  In fact,
I'd be *almost* tempted just to leave the discussion of these local
exclude files at that, and refer elsewhere for the details.  Do people
really find them useful?

But those are nits.  I'll happily take it as is and then revise
later....

--b.
