Return-Path: <git-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.1 (2015-04-28) on dcvr.yhbt.net
X-Spam-Level: 
X-Spam-ASN: AS31976 209.132.180.0/23
X-Spam-Status: No, score=-4.0 required=3.0 tests=AWL,BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,FREEMAIL_FORGED_FROMDOMAIN,FREEMAIL_FROM,
	HEADER_FROM_DIFFERENT_DOMAINS,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI
	shortcircuit=no autolearn=ham autolearn_force=no version=3.4.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by dcvr.yhbt.net (Postfix) with ESMTP id D8D6B1F428
	for <e@80x24.org>; Wed, 15 Aug 2018 05:50:16 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726422AbeHOIk6 (ORCPT <rfc822;e@80x24.org>);
        Wed, 15 Aug 2018 04:40:58 -0400
Received: from mail-ua1-f67.google.com ([209.85.222.67]:35626 "EHLO
        mail-ua1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725876AbeHOIk5 (ORCPT <rfc822;git@vger.kernel.org>);
        Wed, 15 Aug 2018 04:40:57 -0400
Received: by mail-ua1-f67.google.com with SMTP id q12-v6so174440ual.2
        for <git@vger.kernel.org>; Tue, 14 Aug 2018 22:50:14 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=aUN6HZC1iWU8ablmXPTixew9+cYKietkWvk2GhWdLA0=;
        b=D7+TYBAQhxquRqrqo8vxElx98oXegSIGbANRQciw8i28dGb0YbtkSyPn5pelAHk7Yt
         apbfikPP6Gme+7oGIGLPOiNfry56c8t+E05doYM/MMprIcRAAXH9r68qDZs4KiVeptns
         VIW8qR1BlfTPPkHf1kAV+dAAt1D0MZKThPYslJtyViWYXfP4m1PYgiqmcC4MUiwkBdvA
         lRehuetBfz7Qz/5V30hG4JXXC5j+9XXWJH/ESbI8W7XTqgni8R5cuH/h7ymGzEUqz/TS
         KNqpBjz4n+RSDYt/76n8dZx450ygbAew3RuhTLHWpj9jrEJ9IMf1H2RJGEcQSAfiMdS1
         AFqA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=aUN6HZC1iWU8ablmXPTixew9+cYKietkWvk2GhWdLA0=;
        b=rOBvwBuiZxoDexsXbCyH+qEj5ZTXOsmrvzKZeRRMQ71vwO466ThvMiBbzy0UK4uHqF
         QGgfamaXkRj4a35/RTuXki6+Duu4DVH/Ovzpok7tb0BfLRSOM+zKhZwwEUidqgVahrbo
         zkKzqBKPAYyAw/4GP4EYB5fPMxjWrMEgmZYwHW5vpMHNYffVlgjkq/sUPKgIetrQY6Iv
         YGZmLWH45b9izrqwj2CEM7IqvzL9QOSWGNNshy+sSbdMgf13Lrry4tQJOEO1S5RZgta4
         MBqNQxLe89xiuVJOyljw2MBSfNqYlnUCXCB1S0+ClYgvXHEspFov52dVkO6YHLpqWqdZ
         hwqg==
X-Gm-Message-State: AOUpUlGQDqh4r8lnaeyR+bUDoR7e4wwexXWZChHoFhhCfq9KW/jSnQBH
        CvnQWmuGkOcrCZ33wT1Wyh0oHvp6PS8D3qL41m4=
X-Google-Smtp-Source: AA+uWPztzgEIVeV1SZjwfJIGbMpIub90WSAqTiZHFMrXJxGQ2KuYojDYqzRhlS1CwVWgq7frnij4xZZ/0QIo3JuzRNk=
X-Received: by 2002:a1f:f284:: with SMTP id q126-v6mr15632736vkh.38.1534312213972;
 Tue, 14 Aug 2018 22:50:13 -0700 (PDT)
MIME-Version: 1.0
References: <20180811205024.11291-1-newren@gmail.com> <20180813171749.10481-1-newren@gmail.com>
 <20180813171749.10481-2-newren@gmail.com> <20180815051011.GC32543@aiede.svl.corp.google.com>
In-Reply-To: <20180815051011.GC32543@aiede.svl.corp.google.com>
From:   Elijah Newren <newren@gmail.com>
Date:   Tue, 14 Aug 2018 22:50:02 -0700
Message-ID: <CABPp-BFk2X5TApYzs3QtdokBs3Hqz9uX737M6RGMtaU+wYUikw@mail.gmail.com>
Subject: Re: [PATCHv3 1/6] Add missing includes and forward declares
To:     Jonathan Nieder <jrnieder@gmail.com>
Cc:     Git Mailing List <git@vger.kernel.org>,
        =?UTF-8?B?w4Z2YXIgQXJuZmrDtnLDsA==?= <avarab@gmail.com>,
        Jeff King <peff@peff.net>,
        Ramsay Jones <ramsay@ramsayjones.plus.com>
Content-Type: text/plain; charset="UTF-8"
Sender: git-owner@vger.kernel.org
Precedence: bulk
List-ID: <git.vger.kernel.org>
X-Mailing-List: git@vger.kernel.org

On Tue, Aug 14, 2018 at 10:10 PM Jonathan Nieder <jrnieder@gmail.com> wrote:
>
> Elijah Newren wrote:
>
> > Subject: Add missing includes and forward declares
>
> nit: s/declares/declarations/

Thanks.

> This is a huge patch.  Was it autogenerated or generated manually?
> Can the commit message say something about methodology?

Mostly manually.  I had a simple program that would create a dummy.c
file that included git-compat-util.h then exactly one header, compile
it, and spit any compile errors at me.  I repeated that through the
top-level headers.

I didn't want to repeat that description in all 6 patches, since all
six came from that, so I put it in the cover letter.  Since patch #1
has most that changes though, I guess it makes sense to include it at
least in that one?

> Is there an easy way to review it?  (Keep in mind that I'm super lazy.
> ;-))

I guess I could send you my hacky python script that loops through the
top-level header files and creates the dummy two-line c file, and you
could inspect it and run it.  But that only verifies that it compiles,
not that the changes I choose are "correct".

>
> > Signed-off-by: Elijah Newren <newren@gmail.com>
> > ---
> [...]
> > --- a/alloc.h
> > +++ b/alloc.h
> > @@ -1,9 +1,11 @@
> >  #ifndef ALLOC_H
> >  #define ALLOC_H
> >
> > +struct alloc_state;
> >  struct tree;
> >  struct commit;
> >  struct tag;
> > +struct repository;
> >
> >  void *alloc_blob_node(struct repository *r);
>
> That's reasonable.  Going forward, is there a way to tell if some of
> these forward declarations are no longer needed at some point in the
> future (e.g. can clang be convinced to warn us about it)?

I'm not aware of anything currently; while I could have easily missed
things, projects like
https://github.com/include-what-you-use/include-what-you-use (which
look active and have a July 2018 date on them) make me suspect there
isn't a good answer currently.

> [...]
> > --- a/apply.h
> > +++ b/apply.h
> > @@ -1,6 +1,9 @@
> >  #ifndef APPLY_H
> >  #define APPLY_H
> >
> > +#include "lockfile.h"
> > +#include "string-list.h"
> > +
> >  enum apply_ws_error_action {
>
> Here, to avoid strange behavior, we have to be careful to make sure
> the headers don't #include apply.h back.  It's a pretty high-level
> header so there's no risk of that *phew*.

:-)

> [...]
> > --- a/archive.h
> > +++ b/archive.h
> > @@ -3,6 +3,9 @@
> >
> >  #include "pathspec.h"
> >
> > +struct object_id;
> > +enum object_type;
>
> enums are of unknown size, so forward declarations don't work for
> them.  See bb/pedantic for some examples.

structs are also of unknown size; the size is irrelevant when the
function signature merely uses a pointer to the struct or enum.  The
enum forward declaration fixes a compilation bug.

> enum object_type is defined in cache.h, so should this #include that?

We could, but we don't need the definition; a forward declaration is sufficient.

> [...]
> > --- a/commit-graph.h
> > +++ b/commit-graph.h
> > @@ -4,6 +4,7 @@
> >  #include "git-compat-util.h"
> >  #include "repository.h"
> >  #include "string-list.h"
> > +#include "cache.h"
>
> We can skip the #include of git-compat-util.h since all .c files
> include it.

Good point.  Should I go through and remove all the inclusions of
git-compat-util.h in header files?

> [...]
> > --- a/fsmonitor.h
> > +++ b/fsmonitor.h
> > @@ -1,6 +1,13 @@
> >  #ifndef FSMONITOR_H
> >  #define FSMONITOR_H
> >
> > +#include "cache.h"
> > +#include "dir.h"
> > +
> > +struct cache_entry;
> > +struct index_state;
> > +struct strbuf;
>
> cache_entry et al are defined in cache.h, right?  Are these forward
> decls needed?

Good catch; they can be removed.  I'm pretty sure I added the forward
declarations first, then noticed it wasn't enough, added the cache.h
include, and forgot to clean up.

> [...]
> > --- a/merge-recursive.h
> > +++ b/merge-recursive.h
> > @@ -1,8 +1,10 @@
> >  #ifndef MERGE_RECURSIVE_H
> >  #define MERGE_RECURSIVE_H
> >
> > -#include "unpack-trees.h"
> >  #include "string-list.h"
> > +#include "unpack-trees.h"
>
> just curious, no need to change: where does this reordering come from?

Well, since I was manually editing anyway, I saw these and decided to
alphabetize it since it's a file I deal with a lot.  *shrug*

> [...]
> > --- a/pathspec.h
> > +++ b/pathspec.h
> > @@ -1,6 +1,11 @@
> >  #ifndef PATHSPEC_H
> >  #define PATHSPEC_H
> >
> > +#include "string.h"
> > +#include "strings.h"
>
> What are these headers?

The original patch[1] had explanations of why I added them:

+#include "string.h"   /* For str[n]cmp */
+#include "strings.h"  /* For str[n]casecmp */

But Peff requested that I remove the comments.

[1] https://public-inbox.org/git/20180811043218.31456-2-newren@gmail.com/

> The rest looks good.
>
> Thanks and hope that helps,
> Jonathan

Thanks for taking a look!
