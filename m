From: Abdelrazak Younes <younes@lyx.org>
Subject: Re: markdown 2 man, was Re: Git Community Book
Date: Fri, 01 Aug 2008 09:11:16 +0200
Message-ID: <4892B714.8010401@lyx.org>
References: <d411cc4a0807290920p62f5d7e1r727a62ef2b4611fc@mail.gmail.com> <20080729170955.GK32184@machine.or.cz> <d411cc4a0807291130p228f77d5r1f390090ec29aef4@mail.gmail.com> <7vwsj4edm1.fsf@gitster.siamese.dyndns.org> <Pine.LNX.4.64.0807291957410.1779@reaper.quantumfyre.co.uk> <alpine.LSU.1.00.0807301514280.3486@wbgn129.biozentrum.uni-wuerzburg.de> <7vy73j418t.fsf@gitster.siamese.dyndns.org> <4891A0D0.6060503@lyx.org> <20080731130101.GC18106@leksak.fem-net> <4891CD34.1070308@lyx.org> <7vvdylv9zq.fsf@gitster.siamese.dyndns.org>
Mime-Version: 1.0
Content-Type: multipart/mixed;
 boundary="------------090604090508090100070904"
Cc: Stephan Beyer <s-beyer@gmx.net>, git@vger.kernel.org,
	Johannes Schindelin <Johannes.Schindelin@gmx.de>,
	Julian Phillips <julian@quantumfyre.co.uk>,
	Scott Chacon <schacon@gmail.com>, Petr Baudis <pasky@suse.cz>
To: Junio C Hamano <gitster@pobox.com>
X-From: git-owner@vger.kernel.org Fri Aug 01 09:12:33 2008
Return-path: <git-owner@vger.kernel.org>
Envelope-to: gcvg-git-2@gmane.org
Received: from vger.kernel.org ([209.132.176.167])
	by lo.gmane.org with esmtp (Exim 4.50)
	id 1KOooP-0004G3-NA
	for gcvg-git-2@gmane.org; Fri, 01 Aug 2008 09:12:31 +0200
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753329AbYHAHL1 (ORCPT <rfc822;gcvg-git-2@m.gmane.org>);
	Fri, 1 Aug 2008 03:11:27 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S1752908AbYHAHL1
	(ORCPT <rfc822;git-outgoing>); Fri, 1 Aug 2008 03:11:27 -0400
Received: from smtp6-g19.free.fr ([212.27.42.36]:56362 "EHLO smtp6-g19.free.fr"
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752810AbYHAHL0 (ORCPT <rfc822;git@vger.kernel.org>);
	Fri, 1 Aug 2008 03:11:26 -0400
Received: from smtp6-g19.free.fr (localhost.localdomain [127.0.0.1])
	by smtp6-g19.free.fr (Postfix) with ESMTP id AFB755FE5E;
	Fri,  1 Aug 2008 09:11:23 +0200 (CEST)
Received: from [192.168.0.10] (gre92-10-88-181-30-42.fbx.proxad.net [88.181.30.42])
	by smtp6-g19.free.fr (Postfix) with ESMTP id 84CE45FD5B;
	Fri,  1 Aug 2008 09:11:22 +0200 (CEST)
User-Agent: Thunderbird/3.0a2pre (Windows; 2008072800)
In-Reply-To: <7vvdylv9zq.fsf@gitster.siamese.dyndns.org>
Sender: git-owner@vger.kernel.org
Precedence: bulk
List-ID: <git.vger.kernel.org>
X-Mailing-List: git@vger.kernel.org
Archived-At: <http://permalink.gmane.org/gmane.comp.version-control.git/91033>

This is a multi-part message in MIME format.
--------------090604090508090100070904
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit

Junio C Hamano wrote:
> Abdelrazak Younes<younes@lyx.org>  writes:
>
>    
>> I just had a look at the user manual and, well unless you have a
>> special emacs mode or whatever that can automate the markup tag
>> insertion, I wonder how can anybody think that writing with this
>> markup language is easier than within LyX, really (genuine question,
>> not sarcasm).
>>      
>
> How greppable and "log -p"-able is the documentation written in LyX?
>    

LyX format is plain text, loosely based on LateX. Here's attached a 
sample .lyx file FYI. We have one tag per line and a maximum of 80 char 
per line so that the format is easily parsable. Advanced users often use 
unix tools (grep, sed, etc) to modify the .lyx file manually.

>   * Where in the documentation do I have to change the description of
>     "--parents" option?
>    

You mean in a text editor, not within LyX? Just look for the string :-)

>   * When did the description of "--cc" for diff families last changed, by
>     whom and why?
>    

Ditto.

> Eas of doing these is mostly why we chose AsciiDoc to begin with.  Any
> alternative you are going to suggest should not make these two things
> impossible or very harder to do.
>    

If you ignore the LyX tags, you can just do what you are used to do 
without problem using a plain text editor. If you want to do something 
more complicated stuff like choosing a different environment or creating 
a nested enumerate list, it is easier to do that within LyX.

Abdel.


--------------090604090508090100070904
Content-Type: application/lyx;
 name="FAQ.lyx"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
 filename="FAQ.lyx"

I0x5WCAxLjYuMHN2biBjcmVhdGVkIHRoaXMgZmlsZS4gRm9yIG1vcmUgaW5mbyBzZWUgaHR0
cDovL3d3dy5seXgub3JnLw0KXGx5eGZvcm1hdCAzMzgNClxiZWdpbl9kb2N1bWVudA0KXGJl
Z2luX2hlYWRlcg0KXHRleHRjbGFzcyBhcnRpY2xlDQpcbGFuZ3VhZ2UgZW5nbGlzaA0KXGlu
cHV0ZW5jb2RpbmcgbGF0aW4xDQpcZm9udF9yb21hbiBkZWZhdWx0DQpcZm9udF9zYW5zIGRl
ZmF1bHQNClxmb250X3R5cGV3cml0ZXIgZGVmYXVsdA0KXGZvbnRfZGVmYXVsdF9mYW1pbHkg
ZGVmYXVsdA0KXGZvbnRfc2MgZmFsc2UNClxmb250X29zZiBmYWxzZQ0KXGZvbnRfc2Zfc2Nh
bGUgMTAwDQpcZm9udF90dF9zY2FsZSAxMDANCg0KXGdyYXBoaWNzIGRlZmF1bHQNClxwYXBl
cmZvbnRzaXplIGRlZmF1bHQNClxzcGFjaW5nIHNpbmdsZQ0KXHVzZV9oeXBlcnJlZiBmYWxz
ZQ0KXHBhcGVyc2l6ZSBkZWZhdWx0DQpcdXNlX2dlb21ldHJ5IHRydWUNClx1c2VfYW1zbWF0
aCAwDQpcdXNlX2VzaW50IDANClxjaXRlX2VuZ2luZSBiYXNpYw0KXHVzZV9iaWJ0b3BpYyBm
YWxzZQ0KXHBhcGVyb3JpZW50YXRpb24gcG9ydHJhaXQNClxsZWZ0bWFyZ2luIDNjbQ0KXHRv
cG1hcmdpbiAyY20NClxyaWdodG1hcmdpbiAzY20NClxib3R0b21tYXJnaW4gM2NtDQpcc2Vj
bnVtZGVwdGggMw0KXHRvY2RlcHRoIDMNClxwYXJhZ3JhcGhfc2VwYXJhdGlvbiBpbmRlbnQN
ClxkZWZza2lwIG1lZHNraXANClxxdW90ZXNfbGFuZ3VhZ2UgZW5nbGlzaA0KXHBhcGVyY29s
dW1ucyAxDQpccGFwZXJzaWRlcyAxDQpccGFwZXJwYWdlc3R5bGUgZGVmYXVsdA0KXHRyYWNr
aW5nX2NoYW5nZXMgZmFsc2UNClxvdXRwdXRfY2hhbmdlcyBmYWxzZQ0KXGF1dGhvciAiIiAN
ClxhdXRob3IgIiIgDQpcZW5kX2hlYWRlcg0KDQpcYmVnaW5fYm9keQ0KDQpcYmVnaW5fbGF5
b3V0IFRpdGxlDQpMeVggRnJlcXVlbnRseSBBc2tlZCBRdWVzdGlvbnMgd2l0aCBBbnN3ZXJz
IA0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBBdXRob3INCmJ5IHRoZSBMeVggVGVh
bQ0KXGJlZ2luX2luc2V0IEZvb3QNCnN0YXR1cyBjb2xsYXBzZWQNCg0KXGJlZ2luX2xheW91
dCBQbGFpbiBMYXlvdXQNClxub2luZGVudA0KSWYgeW91IGhhdmUgY29tbWVudHMgb3IgZXJy
b3IgY29ycmVjdGlvbnMsIHBsZWFzZSBzZW5kIHRoZW0gdG8gdGhlIEx5WCBEb2N1bWVudGEN
CnRpb24gbWFpbGluZyBsaXN0LCA8DQpcYmVnaW5faW5zZXQgQ29tbWFuZEluc2V0IGhyZWYN
CkxhdGV4Q29tbWFuZCBocmVmDQp0YXJnZXQgImx5eC1kb2NzQGxpc3RzLmx5eC5vcmciDQp0
eXBlICJtYWlsdG86Ig0KDQpcZW5kX2luc2V0DQoNCj4uDQpcZW5kX2xheW91dA0KDQpcZW5k
X2luc2V0DQoNCiANClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgQWJzdHJhY3QNClRo
aXMgaXMgdGhlIGxpc3Qgb2YgRnJlcXVlbnRseSBBc2tlZCBRdWVzdGlvbnMgZm9yIEx5WCwg
dGhlIE9wZW4gU291cmNlDQogZG9jdW1lbnQgcHJvY2Vzc29yIHRoYXQgcHJvdmlkZXMgYSBX
aGF0LVlvdS1TZWUtSXMtV2hhdC1Zb3UtTWVhbiBlbnZpcm9ubWVudA0KIGZvciBwcm9kdWNp
bmcgaGlnaCBxdWFsaXR5IGRvY3VtZW50cy4NCiBGb3IgZnVydGhlciBoZWxwLCB5b3UgbWF5
IHdpc2ggdG8gY29udGFjdCB0aGUgTHlYIFVzZXIgR3JvdXAgbWFpbGluZyBsaXN0DQogYXQg
DQpcZmFtaWx5IHR5cGV3cml0ZXINCg0KXGJlZ2luX2luc2V0IENvbW1hbmRJbnNldCBocmVm
DQpMYXRleENvbW1hbmQgaHJlZg0KdGFyZ2V0ICJseXgtdXNlcnNAbGlzdHMubHl4Lm9yZyIN
CnR5cGUgIm1haWx0bzoiDQoNClxlbmRfaW5zZXQNCg0KDQpcZmFtaWx5IGRlZmF1bHQNCiAN
ClxlbXBoIG9uDQphZnRlcg0KXGVtcGggZGVmYXVsdA0KIHlvdSBoYXZlIHJlYWQgdGhyb3Vn
aCB0aGUgZG9jcy4NCiANClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgQWJzdHJhY3QN
ClxiZWdpbl9pbnNldCBDb21tYW5kSW5zZXQgdG9jDQpMYXRleENvbW1hbmQgdGFibGVvZmNv
bnRlbnRzDQoNClxlbmRfaW5zZXQNCg0KDQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0
IFNlY3Rpb24NCkludHJvZHVjdGlvbiBhbmQgR2VuZXJhbCBJbmZvcm1hdGlvbiANClxlbmRf
bGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Vic2VjdGlvbg0KV2hhdCBpcyBMeVg/IA0KXGVu
ZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdGFuZGFyZA0KTHlYIGlzIGEgcHJvZ3JhbSB0
aGF0IHByb3ZpZGVzIGEgbW9yZSBtb2Rlcm4gYXBwcm9hY2ggdG8gd3JpdGluZyBkb2N1bWVu
dHMNCiB3aXRoIGEgY29tcHV0ZXIsIGFuIGFwcHJvYWNoIHRoYXQgYnJlYWtzIHdpdGggdGhl
IG9ic29sZXRlIHRyYWRpdGlvbiBvZg0KIHRoZSANClxiZWdpbl9pbnNldCBRdW90ZXMgZWxk
DQpcZW5kX2luc2V0DQoNCnR5cGV3cml0ZXIgY29uY2VwdC4NClxiZWdpbl9pbnNldCBRdW90
ZXMgZXJkDQpcZW5kX2luc2V0DQoNCiBJdCBpcyBkZXNpZ25lZCBmb3IgYXV0aG9ycyB3aG8g
d2FudCBwcm9mZXNzaW9uYWwgb3V0cHV0IHF1aWNrbHkgd2l0aCBhDQogbWluaW11bSBvZiBl
ZmZvcnQgd2l0aG91dCBiZWNvbWluZyBzcGVjaWFsaXN0cyBpbiB0eXBlc2V0dGluZy4NCiBU
aGUgam9iIG9mIHR5cGVzZXR0aW5nIGlzIGRvbmUgbW9zdGx5IGJ5IHRoZSBjb21wdXRlciwg
bm90IHRoZSBhdXRob3I7DQogd2l0aCBMeVgsIHRoZSBhdXRob3IgY2FuIGNvbmNlbnRyYXRl
IG9uIHRoZSBjb250ZW50cyBvZiBoZXIgd3JpdGluZy4NClxlbmRfbGF5b3V0DQoNClxiZWdp
bl9sYXlvdXQgU3RhbmRhcmQNCkx5WCBwcm92aWRlcyBhbiANClxiZWdpbl9pbnNldCBRdW90
ZXMgZWxkDQpcZW5kX2luc2V0DQoNCmFsbW9zdC1XWVNJV1lHDQpcYmVnaW5faW5zZXQgUXVv
dGVzIGVyZA0KXGVuZF9pbnNldA0KDQogdmlldyBvZiB0aGUgZG9jdW1lbnQuDQogDQpcYmVn
aW5faW5zZXQgUXVvdGVzIGVsZA0KXGVuZF9pbnNldA0KDQpBbG1vc3QNClxiZWdpbl9pbnNl
dCBRdW90ZXMgZXJkDQpcZW5kX2luc2V0DQoNCiBtZWFucyB0aGF0IHRoZSBsaW5lLSBhbmQg
cGFnZS1icmVha3MgYXJlIG5vdCBkaXNwbGF5ZWQgZXhhY3RseSBhcyB0aGV5DQogd2lsbCBh
cHBlYXIgaW4gdGhlIHByaW50ZWQgZG9jdW1lbnQuDQogSG93ZXZlciwgdGhhdCdzIG5vdCBy
ZWFsbHkgbmVjZXNzYXJ5LCBzaW5jZSBMeVggdXNlcyBhIHNlcGFyYXRlIHR5cGVzZXR0ZXIN
CiBwcm9ncmFtIChjYWxsZWQgTGFUZVgpIHRvIHBlcmZvcm0gdGhlIGZpbmFsIGZvcm1hdHRp
bmcgb2YgeW91ciB0ZXh0Lg0KIFdoaWxlIEx5WCBjb250YWlucyBldmVyeXRoaW5nIGl0IG5l
ZWRzIHRvIGJlIGEgY29tZm9ydGFibGUgdXNlciBpbnRlcmZhY2UsDQogdGhlIHR5cGVzZXR0
aW5nIHByb2dyYW0gY29udGFpbnMgZXZlcnl0aGluZyBuZWNlc3NhcnkgdG8gZm9ybWF0IHRl
eHQsIGFuZA0KIGRvIHNvIHZlcnksIHZlcnkgd2VsbC4NCiANClxlbmRfbGF5b3V0DQoNClxi
ZWdpbl9sYXlvdXQgU3RhbmRhcmQNClNvLCBsaW5lLSBhbmQgcGFnZS1icmVha3MgYXJlbid0
IHlvdXIgcHJvYmxlbSBhbnltb3JlLg0KIFJlbWVtYmVyaW5nIHdoaWNoIG51bWJlciB0byB1
c2UgZm9yIHRoZSBuZXh0IHN1YnNlY3Rpb24gaXNuJ3QgeW91ciBwcm9ibGVtDQogYW55bW9y
ZS4NCiBSZWNhbGxpbmcgd2hhdCBmb250IHlvdSB1c2VkIGZvciBhbGwgb2YgeW91ciBzZWN0
aW9uIGhlYWRpbmdzIGlzbid0IHlvdXINCiBwcm9ibGVtIGFueW1vcmUuDQogWW91IHRlbGwg
THlYIChhbmQgTGFUZVgpIHdoYXQgDQpcZW1waCBvbg0Ka2luZA0KXGVtcGggZGVmYXVsdA0K
IG9mIGRvY3VtZW50IHlvdSdyZSBlZGl0aW5nIGFuZCB3aGF0IA0KXGVtcGggb24NCnR5cGUN
ClxlbXBoIGRlZmF1bHQNCiBvZiBwYXJhZ3JhcGggdGhpcy1vci10aGF0IHRleHQgaXMsIHRo
ZSBjb21wdXRlciBjYW4gdHlwZXNldCBpdCBhY2NvcmRpbmdseS4NCiBPZiBjb3Vyc2UgeW91
IGNhbiBhbHNvIHN0aWxsIGRvIHNvbWUgbG93LWxldmVsIGZvcm1hdHRpbmcgZm9yIGZpbmUt
dHVuaW5nLg0KIEhvd2V2ZXIsIHRoZSBwcm9wZXIgd2F5IHdpdGggTHlYIGlzIHRvIHRlbGwg
dGhlIGNvbXB1dGVyIHdoYXQgdGhlIHRleHQNCiANClxlbXBoIG9uDQppcw0KXGVtcGggZGVm
YXVsdA0KLCBub3Qgd2hhdCBpdCBzaG91bGQgbG9vayBsaWtlLg0KIFNvLCB3ZSBsaWtlIHRv
IHNheSB0aGF0IEx5WCBnaXZlcyB5b3UgV1lTSVdZTSBlZGl0aW5nIChXaGF0IFlvdSBTZWUg
SXMNCiBXaGF0IFlvdSANClxlbXBoIG9uDQpNZWFuDQpcZW1waCBkZWZhdWx0DQopLg0KXGVu
ZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdWJzZWN0aW9uDQpUaGF0J3MgZmluZSwgYnV0
IGlzIGl0IHVzZWZ1bD8NClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3RhbmRhcmQN
CkFic29sdXRlbHkuDQogVGhlIGZvbGxvd2luZyB0eXBlIG9mIGRvY3VtZW50cyBoYXZlIGJl
ZW4gcHJvZHVjZWQgd2l0aCBMeVg6DQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IEl0
ZW1pemUNCk1lbW9zDQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IEl0ZW1pemUNCkxl
dHRlcnMNClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgSXRlbWl6ZQ0KRGlzc2VydGF0
aW9ucyAoMjYwIHBhZ2VzIGluIGEgc2luZ2xlIGRvY3VtZW50LCBsb25nZXIgdXNpbmcgaW5j
bHVkZSBmaWxlcykNClxlbmRfbGF5b3V0DQoNClxiZWdpbl9kZWVwZXINClxiZWdpbl9sYXlv
dXQgSXRlbWl6ZQ0KZm9yIGV4YW1wbGUsIA0KXGJlZ2luX2luc2V0IEZsZXggVVJMDQpzdGF0
dXMgY29sbGFwc2VkDQoNClxiZWdpbl9sYXlvdXQgUGxhaW4gTGF5b3V0DQoNCmh0dHA6Ly93
d3cuZmVlLnV2YS5ubC9zY2hvbGFyL21kdy9sZXV2ZW4vdGhlc2lzLnBkZg0KXGVuZF9sYXlv
dXQNCg0KXGVuZF9pbnNldA0KDQoNClxlbmRfbGF5b3V0DQoNClxlbmRfZGVlcGVyDQpcYmVn
aW5fbGF5b3V0IEl0ZW1pemUNCkxlY3R1cmUgbm90ZXMgKDEzMyBwYWdlcywgMjcgZmlndXJl
cyBvbiBhIDMzIE1IeiA0ODYgbWFjaGluZSEpIA0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xh
eW91dCBJdGVtaXplDQpTZW1pbmFyIG5vdGVib29rcyAoNTAwKyBwYWdlcykNClxlbmRfbGF5
b3V0DQoNClxiZWdpbl9sYXlvdXQgSXRlbWl6ZQ0KQ29uZmVyZW5jZSBwcm9jZWVkaW5ncyAo
UHJvY2VlZGluZ3Mgb2YgdGhlIFNlY29uZCBDb250aW5lbnRhbCBXb3Jrc2hvcCBvbg0KIHRo
ZSBHZW9pZCBpbiBFdXJvcGUsIChGaW5uaXNoIEdlb2RldGljIEluc3RpdHV0ZSBSZXBvcnQg
OTg6NCksIDI5MiBwYWdlcykNClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgSXRlbWl6
ZQ0KU29mdHdhcmUgRG9jdW1lbnRhdGlvbiAodGhlIEx5WCBVc2VyIEd1aWRlIGlzIGFib3V0
IDEyMCBwYWdlcykgDQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IEl0ZW1pemUNCkJv
b2tzIA0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2RlZXBlcg0KXGJlZ2luX2xheW91dCBJdGVt
aXplDQpzZWUgDQpcYmVnaW5faW5zZXQgRmxleCBVUkwNCnN0YXR1cyBjb2xsYXBzZWQNCg0K
XGJlZ2luX2xheW91dCBQbGFpbiBMYXlvdXQNCg0KaHR0cDovL3d3dy5wb3N0Z3Jlc3FsLm9y
Zy9kb2NzL2F3Ym9vay5odG1sDQpcZW5kX2xheW91dA0KDQpcZW5kX2luc2V0DQoNCiBmb3Ig
YW4gZXhhbXBsZSBvbiBQb3N0Z3JlU1FMDQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0
IEl0ZW1pemUNCkRvbm5heSwgSi1QLiwgQmFybnNsZXksIE0uSi4sIGFuZCBMb25nbGV5LCBQ
LkEuLCBlZHMuLCAyMDAxLCBSZW1vdGUgU2Vuc2luZyBhbmQNCiBVcmJhbiBBbmFseXNpcyAo
VGF5bG9yIGFuZCBGcmFuY2lzOiBMb25kb24pLg0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xh
eW91dCBJdGVtaXplDQpIZXJiZXJ0IFZvc3M6IFByYWt0aXNjaGUgS3J5cHRvbG9naWUgbWl0
IEphdmEgMjg2IHBhZ2VzLCBsb3RzIG9mIGVxdWF0aW9ucywNCiB0YWJsZXMsIGZpZ3VyZXMu
DQogSVNCTiAzLTgzMTEtMTQ1OC03DQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IEl0
ZW1pemUNCllhbm4gQ29sbGV0dGUgYW5kIFBhdHJpY2sgU2lhcnJ5LCBPcHRpbWlzYXRpb24g
bXVsdGlvYmplY3RpZnMsIDIwMDIsIEV5cm9sbGVzDQpcZW5kX2xheW91dA0KDQpcZW5kX2Rl
ZXBlcg0KXGJlZ2luX2xheW91dCBJdGVtaXplDQpQYXBlcnMgcHVibGlzaGVkIGluIHRoZSBm
b2xsb3dpbmcgcmVmZXJlZWQgam91cm5hbHM6DQpcZW5kX2xheW91dA0KDQpcYmVnaW5fZGVl
cGVyDQpcYmVnaW5fbGF5b3V0IEl0ZW1pemUNCkFzdHJvbm9teSAmIEFzdHJvcGh5c2ljcyAo
U3VldHRlcmxpbiwgUC4NCiAxOTk4LCBBJkEsIDMzMywgMzA1OyBTdWV0dGVybGluLCBQLg0K
ICYgV2llaHIsIEUuDQogMTk5OCwgQSZBLCAzMzYsIDM2NykNClxlbmRfbGF5b3V0DQoNClxi
ZWdpbl9sYXlvdXQgSXRlbWl6ZQ0KQXN0cm9ub21pY2FsIEpvdXJuYWwgKFJlc3NsZXIsIE0u
DQogRS4NCiAmIEJhcnNvbnksIE0uDQogMjAwMSwgQUosIDEyMSwgMTA5OCkNClxlbmRfbGF5
b3V0DQoNClxlbmRfZGVlcGVyDQpcYmVnaW5fbGF5b3V0IEl0ZW1pemUNCk5vdmVscyAoNDAw
KyBwYWdlIG5vdmVsIGR1ZSBvdXQgaW4gU2VwdGVtYmVyIDIwMDA7IGFuIDgzNiBwYWdlIG5v
dmVsIGlzDQogY3VycmVudGx5IHdpdGggYW4gYWdlbnQpDQpcZW5kX2xheW91dA0KDQpcYmVn
aW5fbGF5b3V0IEl0ZW1pemUNClNjcmlwdHMgZm9yIHBsYXlzIGFuZCBtb3ZpZXMNClxlbmRf
bGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgSXRlbWl6ZQ0KQnVzaW5lc3MgcHJvcG9zYWxzIGZv
ciA+ICQxIE0gKFVTKQ0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdWJzZWN0aW9u
DQpXaGVyZSBkbyBJIHN0YXJ0PyANClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Rh
bmRhcmQNClRoZSB3ZWJzaXRlIA0KXGJlZ2luX2luc2V0IEZsZXggVVJMDQpzdGF0dXMgY29s
bGFwc2VkDQoNClxiZWdpbl9sYXlvdXQgUGxhaW4gTGF5b3V0DQoNCnd3dy5seXgub3JnDQpc
ZW5kX2xheW91dA0KDQpcZW5kX2luc2V0DQoNCiBpcyB0aGUgZmlyc3QgcGxhY2UgdG8gZ28g
Zm9yIGFueXRoaW5nIHJlbGF0ZWQgdG8gTHlYLg0KIE5ld3MsIGV4YW1wbGVzLCBkb3dubG9h
ZHMsIGFuZCBsb3RzIG9mIG90aGVyIHN0dWZmIGlzIGF2YWlsYWJsZSB0aGVyZS4NCiBBZnRl
ciB5b3UgaGF2ZSBpbnN0YWxsZWQgTHlYIGFuZCBzdGFydGVkIGl0IHRoZSBmaXJzdCB0aW1l
LCByZWFkIHRoZSBUdXRvcmlhbA0KICgNClxmYW1pbHkgc2Fucw0KSGVscFxTcGVjaWFsQ2hh
ciBcbWVudXNlcGFyYXRvcg0KVHV0b3JpYWwNClxmYW1pbHkgZGVmYXVsdA0KKS4NCiBZZXMs
IEkgcmVhbGx5IG1lYW4gdGhhdC4NClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Rh
bmRhcmQNCkFub3RoZXIgYmFzaWMgaW50cm9kdWN0b3J5IGd1aWRlIG1heSBiZSBmb3VuZCBh
dCANClxiZWdpbl9pbnNldCBGbGV4IFVSTA0Kc3RhdHVzIGNvbGxhcHNlZA0KDQpcYmVnaW5f
bGF5b3V0IFBsYWluIExheW91dA0KDQp3d3cuYmlsa2VudC5lZHUudHIvfnJvYmluL2x5eGd1
aWRlLnBkZg0KXGVuZF9sYXlvdXQNCg0KXGVuZF9pbnNldA0KDQoNClxlbmRfbGF5b3V0DQoN
ClxiZWdpbl9sYXlvdXQgU3Vic2VjdGlvbg0KRG9lcyBMeVggcnVuIG9uIG15IGNvbXB1dGVy
Pw0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdGFuZGFyZA0KTHlYIGlzIGtub3du
IHRvIHJ1biBvbiB0aGUgZm9sbG93aW5nIHBsYXRmb3JtcyAoYW5kIHByb2JhYmx5IGEgemls
bGlvbiBvdGhlcnMpOg0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBJdGVtaXplDQpM
aW51eCBkaXN0cmlidXRpb25zOiBEZWJpYW4sIFJlZEhhdCwgU1VTRSwgTWFuZHJha2UsIEZl
ZG9yYSwgVWJ1bnR1LCBHZW50b28sDQogZXRjDQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5
b3V0IEl0ZW1pemUNCk1pY3Jvc29mdCBXaW5kb3cgTlQsIDIwMDAsIFhQLCBWaXN0YSAoV2lu
ZG93cyA5NS85OC9NZSBlZGl0aW9ucyBhcmUgbm90DQogc3VwcG9ydGVkKQ0KXGVuZF9sYXlv
dXQNCg0KXGJlZ2luX2xheW91dCBJdGVtaXplDQpNYWNPU1ggKHN0YXJ0aW5nIGZyb20gMTAu
MSkNClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgSXRlbWl6ZQ0KU3BhcmNMaW51eDog
UmVkSGF0IDYuMA0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBJdGVtaXplDQpTdW4g
U29sYXJpcyAyLjYsIDIuNw0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBJdGVtaXpl
DQpUcnU2NCBVbml4IDQuMGYNClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgSXRlbWl6
ZQ0KSFAtVVgNClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgSXRlbWl6ZQ0KT1NGMSBm
bG9yZSBWNC4wIDEwOTEgYWxwaGENClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Vi
c2VjdGlvbg0KSG93IG11Y2ggaGFyZCBkaXNrIHNwYWNlIGRvZXMgTHlYIG5lZWQ/IA0KXGVu
ZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdGFuZGFyZA0KQmluYXJ5IHNpemUgZGVwZW5k
cyBvbiB0aGUgc3lzdGVtLCB0aGUgTHlYIGJpbmFyeSBjb25zdW1lcyAxMyBNQiBvZiBkaXNr
DQogc3BhY2Ugb24gV2luZG93cywgd2hpbGUgdGhlIHN1cHBvcnRpbmcgZmlsZXMgb2NjdXB5
IGFub3RoZXIgMjUgTUIgKDE3IE1CDQogb2Ygd2hpY2ggaXMgY29uc3VtZWQgYnkgdGhlIGRv
Y3MhIFlvdSBjYW4gZGVsZXRlIHRoZSBsYW5ndWFnZXMgeW91IGRvbid0DQogY2FyZSBhYm91
dCB0byBzYXZlIHNvbWUgc3BhY2UpLg0KIE9mIGNvdXJzZSwgeW91IGRvIG5lZWQgdG8gaGF2
ZSBzb21ldGhpbmcgbGlrZSB0ZVRlWCBpbnN0YWxsZWQgd2hpY2ggY29uc3VtZXMNCiBhIG1l
cmUgMTE1IE1CLCBhcyB3ZWxsIGFzIGdob3N0c2NyaXB0LCB3aGljaCBpcyBhbm90aGVyIDEw
IE1CIQ0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdWJzZWN0aW9uDQpJcyBMeVgg
cmVhbGx5IE9wZW4gU291cmNlPyANClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Rh
bmRhcmQNClllcy4NCiBUaGUgZnJlZWx5IGF2YWlsYWJsZSBHVUkgdG9vbGtpdCB0aGF0IEx5
WCB1c2VzLCBRdCwgYWx0aG91Z2ggYSBwcm9wcmlldGFyeQ0KIHByb2R1Y3Qgb2YgVHJvbGwg
VGVjaCwgaXMgdXNlZCBpbiBpdHMgb3BlbiBzb3VyY2UgR1BMIHZhcmlhbnQuDQogVGhlIEx5
WCBzb3VyY2UgaXRzZWxmIGlzIGFsc28gYXZhaWxhYmxlIHVuZGVyIHRoZSBHUEwsIHNvIGl0
IHF1YWxpZmllcy4NClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU2VjdGlvbg0KSW50
ZXJuZXQgUmVzb3VyY2VzDQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IFN1YnNlY3Rp
b24NCldoZXJlIHNob3VsZCBJIGxvb2sgb24gdGhlIFdvcmxkIFdpZGUgV2ViIGZvciBMeVgg
c3R1ZmY/IA0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBJdGVtaXplDQpcYmVnaW5f
aW5zZXQgRmxleCBVUkwNCnN0YXR1cyBvcGVuDQoNClxiZWdpbl9sYXlvdXQgUGxhaW4gTGF5
b3V0DQoNCnd3dy5seXgub3JnDQpcZW5kX2xheW91dA0KDQpcZW5kX2luc2V0DQoNCg0KXGVu
ZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBJdGVtaXplDQpcYmVnaW5faW5zZXQgRmxleCBV
UkwNCnN0YXR1cyBvcGVuDQoNClxiZWdpbl9sYXlvdXQgUGxhaW4gTGF5b3V0DQoNCmJ1Z3pp
bGxhLmx5eC5vcmcNClxlbmRfbGF5b3V0DQoNClxlbmRfaW5zZXQNCg0KLCBpZiB5b3Ugd2Fu
dCB0byByZXBvcnQgYSBidWcgaW4gTHlYLg0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91
dCBTdWJzZWN0aW9uDQpXaGVyZSBjYW4gSSBnZXQgTHlYIG1hdGVyaWFsIGJ5IEZUUD8gDQpc
ZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IEl0ZW1pemUNCmZ0cC5seXgub3JnIGluIC9w
dWIvbHl4IChhbHNvIGtub3duIGFzIGZ0cC52aWEuZWNwLmZyKQ0KXGVuZF9sYXlvdXQNCg0K
XGJlZ2luX2xheW91dCBTdWJzZWN0aW9uDQpXaGF0IG1haWxpbmcgbGlzdHMgYXJlIHRoZXJl
PyANClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgSXRlbWl6ZQ0KbHl4LWFubm91bmNl
QGxpc3RzLmx5eC5vcmcgKHZlcnkgbG93IHZvbHVtZSksIGZvciBhbm5vdW5jZW1lbnRzIHJl
bGF0ZWQgdG8NCiBMeVgNClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgSXRlbWl6ZQ0K
bHl4LXVzZXJzQGxpc3RzLmx5eC5vcmcgKG1lZGl1bSB2b2x1bWUpLCBmb3IgZ2VuZXJhbCB1
c2FnZSBpc3N1ZXMNClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgSXRlbWl6ZQ0KbHl4
LWRldmVsQGxpc3RzLmx5eC5vcmcgKGhpZ2ggdm9sdW1lKSwgZm9yIGRldmVsb3BtZW50IGFu
ZCBkZWJ1Z2dpbmcgaXNzdWVzDQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IEl0ZW1p
emUNCmx5eC1kb2NzQGxpc3RzLmx5eC5vcmcgKGV4Y3J1Y2lhdGluZ2x5IGxvdyB2b2x1bWUp
LCBmb3IgZG9jdW1lbnRhdGlvbiBpc3N1ZXMNCiANClxlbmRfbGF5b3V0DQoNClxiZWdpbl9s
YXlvdXQgU3RhbmRhcmQNCkdlbmVyYWxseSwgeW91IHdvdWxkIHNlbmQgZW1haWwgdG8gbHl4
LWZvby1zdWJzY3JpYmVAbGlzdHMubHl4Lm9yZyB0byBzdWJzY3JpYmUNCiB0byB0aGVzZSBs
aXN0cyBvciB0byBseXgtZm9vLXVuc3Vic2NyaWJlQGxpc3RzLmx5eC5vcmcgdG8gdW5zdWJz
Y3JpYmUsIHdoZXJlDQogDQpcYmVnaW5faW5zZXQgUXVvdGVzIGVsZA0KXGVuZF9pbnNldA0K
DQpmb28NClxiZWdpbl9pbnNldCBRdW90ZXMgZXJkDQpcZW5kX2luc2V0DQoNCiBpcyBvbmUg
b2YgDQpcYmVnaW5faW5zZXQgUXVvdGVzIGVsZA0KXGVuZF9pbnNldA0KDQphbm5vdW5jZQ0K
XGJlZ2luX2luc2V0IFF1b3RlcyBlcmQNClxlbmRfaW5zZXQNCg0KLCANClxiZWdpbl9pbnNl
dCBRdW90ZXMgZWxkDQpcZW5kX2luc2V0DQoNCnVzZXJzDQpcYmVnaW5faW5zZXQgUXVvdGVz
IGVyZA0KXGVuZF9pbnNldA0KDQosIA0KXGJlZ2luX2luc2V0IFF1b3RlcyBlbGQNClxlbmRf
aW5zZXQNCg0KZGV2ZWwNClxiZWdpbl9pbnNldCBRdW90ZXMgZXJkDQpcZW5kX2luc2V0DQoN
Ciwgb3IgDQpcYmVnaW5faW5zZXQgUXVvdGVzIGVsZA0KXGVuZF9pbnNldA0KDQpkb2NzDQpc
YmVnaW5faW5zZXQgUXVvdGVzIGVyZA0KXGVuZF9pbnNldA0KDQo7IGRlZmluaXRlbHkgc2Vl
IA0KXGJlZ2luX2luc2V0IEZsZXggVVJMDQpzdGF0dXMgb3Blbg0KDQpcYmVnaW5fbGF5b3V0
IFBsYWluIExheW91dA0KDQpodHRwOi8vd3d3Lmx5eC5vcmcvTWFpbGluZ0xpc3RzDQpcZW5k
X2xheW91dA0KDQpcZW5kX2luc2V0DQoNCiBmb3IgdGhlIGZ1bGwgZGV0YWlscy4NClxlbmRf
bGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Vic2VjdGlvbg0KQXJlIHRoZSBtYWlsaW5nIGxp
c3RzIGFyY2hpdmVkIGFueXdoZXJlPyANClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQg
U3RhbmRhcmQNClllcy4NCiA6LSkNClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Vi
c2VjdGlvbg0KT2theSwgd2lzZSBndXkhIFdoZXJlIGFyZSB0aGV5IGFyY2hpdmVkPw0KXGVu
ZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBJdGVtaXplDQpBbm5vdW5jZTogDQpcYmVnaW5f
aW5zZXQgRmxleCBVUkwNCnN0YXR1cyBvcGVuDQoNClxiZWdpbl9sYXlvdXQgUGxhaW4gTGF5
b3V0DQoNCmh0dHA6Ly93d3cubWFpbC1hcmNoaXZlLmNvbS9seXgtYW5ub3VuY2VAbGlzdHMu
bHl4Lm9yZy8NClxlbmRfbGF5b3V0DQoNClxlbmRfaW5zZXQNCg0KDQpcZW5kX2xheW91dA0K
DQpcYmVnaW5fbGF5b3V0IEl0ZW1pemUNClVzZXJzOiANClxiZWdpbl9pbnNldCBGbGV4IFVS
TA0Kc3RhdHVzIG9wZW4NCg0KXGJlZ2luX2xheW91dCBQbGFpbiBMYXlvdXQNCg0KaHR0cDov
L3d3dy5tYWlsLWFyY2hpdmUuY29tL2x5eC11c2Vyc0BsaXN0cy5seXgub3JnLw0KXGVuZF9s
YXlvdXQNCg0KXGVuZF9pbnNldA0KDQoNClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQg
SXRlbWl6ZQ0KRGV2ZWw6IA0KXGJlZ2luX2luc2V0IEZsZXggVVJMDQpzdGF0dXMgb3Blbg0K
DQpcYmVnaW5fbGF5b3V0IFBsYWluIExheW91dA0KDQpodHRwOi8vd3d3Lm1haWwtYXJjaGl2
ZS5jb20vbHl4LWRldmVsQGxpc3RzLmx5eC5vcmcvDQpcZW5kX2xheW91dA0KDQpcZW5kX2lu
c2V0DQoNCg0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTZWN0aW9uDQpDb21wYXRp
YmlsaXR5IHdpdGggb3RoZXIgd29yZC9kb2N1bWVudCBwcm9jZXNzb3JzDQpcZW5kX2xheW91
dA0KDQpcYmVnaW5fbGF5b3V0IFN1YnNlY3Rpb24NCkNhbiBJIHJlYWQvd3JpdGUgTGFUZVgg
ZmlsZXM/DQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IFN0YW5kYXJkDQpZZXMuDQog
THlYIG91dHB1dHMgTGFUZVggZmlsZXMgdGhhdCBhcmUgZWl0aGVyIG1hY2hpbmUgb3IgaHVt
YW4gZnJpZW5kbHkuDQogVGhlIA0KXGZhbWlseSB0eXBld3JpdGVyDQp0ZXgybHl4DQpcZmFt
aWx5IGRlZmF1bHQNCiBwcm9ncmFtIHRoYXQgY29tZXMgd2l0aCBMeVggZG9lcyBhIGRlY2Vu
dCBqb2Igb2YgY29udmVydGluZyBMYVRlWCBpbnRvDQogTHlYLg0KIEl0J3Mgbm90IHBlcmZl
Y3QsIGJ1dCBpdCB3aWxsIHVzdWFsbHkgZ2V0IGF0IGxlYXN0IDk1JSBvZiB0aGUgam9iIGRv
bmUNCiBmb3IgeW91Lg0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdWJzZWN0aW9u
DQpDYW4gSSByZWFkL3dyaXRlIFdvcmQgZmlsZXM/DQpcZW5kX2xheW91dA0KDQpcYmVnaW5f
bGF5b3V0IFN0YW5kYXJkDQpOb3QgdHJpdmlhbGx5Lg0KIFNlZSB0aGVzZSBwYWdlOiANClxi
ZWdpbl9pbnNldCBGbGV4IFVSTA0Kc3RhdHVzIG9wZW4NCg0KXGJlZ2luX2xheW91dCBQbGFp
biBMYXlvdXQNCg0KaHR0cDovL3dpa2kubHl4Lm9yZy9MeVgvQ29udmVydGluZ0Zyb21Xb3Jk
DQpcZW5kX2xheW91dA0KDQpcZW5kX2luc2V0DQoNCiBhbmQgYWxzbyB0aGUgY29udmVydGVy
cyBzZWN0aW9uIHdoaWNoIHdpbGwgZ2l2ZSBhbm90aGVyIHBvc3NpYmlsaXRpZXMgb2YNCiBj
b252ZXJzaW9uIHJvdXRlczogDQpcYmVnaW5faW5zZXQgRmxleCBVUkwNCnN0YXR1cyBvcGVu
DQoNClxiZWdpbl9sYXlvdXQgUGxhaW4gTGF5b3V0DQoNCmh0dHA6Ly93d3cubHl4Lm9yZy9B
ZGRpdGlvbmFsU29mdHdhcmUjdG9jOQ0KXGVuZF9sYXlvdXQNCg0KXGVuZF9pbnNldA0KDQou
DQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IFN0YW5kYXJkDQpGaW5hbGx5LCB3aGVu
IGFsbCBlbHNlIGZhaWxzLCB1c2UgYW55IHdvcmQgcHJvY2Vzc29yIChXb3JkUGVyZmVjdCwg
U3Rhck9mZmljZS9PcA0KZW5PZmZpY2UsIC4uLikgd2hpY2ggdW5kZXJzdGFuZHMgV29yZC4N
CiBUaGVuIGV4cG9ydCBhcyB0aGUgZmlsZSBhcyBwbGFpbiB0ZXh0IGFuZCBhZGQgdGhlIGZv
cm1hdHRpbmcgYnkgaGFuZCBpbg0KIEx5WC4NCiANClxlbmRfbGF5b3V0DQoNClxiZWdpbl9s
YXlvdXQgU3Vic2VjdGlvbg0KQ2FuIEkgcmVhZC93cml0ZSBIVE1MIGZpbGVzPw0KXGVuZF9s
YXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdGFuZGFyZA0KWW91IGNhbiBvdXRwdXQgSFRNTCBm
aWxlcyB1c2luZyB0aGUgDQpcYmVnaW5faW5zZXQgUXVvdGVzIGVsZA0KXGVuZF9pbnNldA0K
DQp0dGgNClxiZWdpbl9pbnNldCBRdW90ZXMgZXJkDQpcZW5kX2luc2V0DQoNCiBjb252ZXJ0
ZXIgcHJvZ3JhbSwgYW1vbmdzdCBvdGhlcnMuDQogVGhlcmUgaXMgYSBIVE1MDQpcYmVnaW5f
aW5zZXQgRm9ybXVsYSAkXHJpZ2h0YXJyb3ckDQpcZW5kX2luc2V0DQoNCkxhVGVYIHByb2dy
YW0gYXZhaWxhYmxlIChodG1sMmxhdGV4KSB3aGljaCBhbGxvd3MgeW91IHRvIGNvbnZlcnQg
dGhlIG90aGVyDQogZGlyZWN0aW9uLg0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBT
ZWN0aW9uDQpPYnRhaW5pbmcgYW5kIENvbXBpbGluZyBMeVggDQpcZW5kX2xheW91dA0KDQpc
YmVnaW5fbGF5b3V0IFN1YnNlY3Rpb24NCldoYXQgZG8gSSBuZWVkPw0KXGVuZF9sYXlvdXQN
Cg0KXGJlZ2luX2xheW91dCBJdGVtaXplDQpMeVggc291cmNlIGNvZGU6IGx5eC0xLngueC50
YXIuZ3oNClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgSXRlbWl6ZQ0KUXQgbGlicmFy
eTogUXQtNC4yLjAgb3IgaGlnaGVyICh1c2luZyB0aGUgbGF0ZXN0IHZlcnNpb24gYXZhaWxh
YmxlIGlzIHJlY29tbWVuZGVkKQ0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBJdGVt
aXplDQpBIExhVGVYIGluc3RhbGxhdGlvbjogd2Ugc3Ryb25nbHkgcmVjb21tZW5kIHRlVGVY
L1RlWExpdmUgb24gTGludXgsIE1pa1RlWA0KIG9uIFdpbmRvdw0KXGVuZF9sYXlvdXQNCg0K
XGJlZ2luX2xheW91dCBJdGVtaXplDQpBIFBvc3RTY3JpcHTCriBpbnRlcnByZXRlcjogZ2hv
c3RzY3JpcHQgNy4wIG9yIGhpZ2hlcg0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBJ
dGVtaXplDQpBIG1vZGVybiBDKysgY29tcGlsZXIuDQogSWYgeW91IGFyZSB1c2luZyBnY2Ms
IEx5WCByZXF1aXJlcyBhdCBsZWFzdCB2ZXJzaW9uIDMuMi4wLg0KXGVuZF9sYXlvdXQNCg0K
XGJlZ2luX2xheW91dCBTdWJzZWN0aW9uDQpIb3cgZG8gSSBjb21waWxlIGl0Pw0KXGVuZF9s
YXlvdXQNCg0KXGJlZ2luX2xheW91dCBJdGVtaXplDQouL2NvbmZpZ3VyZQ0KXGVuZF9sYXlv
dXQNCg0KXGJlZ2luX2xheW91dCBJdGVtaXplDQptYWtlDQpcZW5kX2xheW91dA0KDQpcYmVn
aW5fbGF5b3V0IEl0ZW1pemUNCm1ha2UgaW5zdGFsbCAodXN1YWxseSBhcyByb290LCB0aG91
Z2ggeW91IGRvbid0IGhhdmUgdG8gYmUgaWYgeW91IGFkZCBmbGFncw0KIHRvIHRoZSBjb25m
aWd1cmUgY29tbWFuZCkNClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3RhbmRhcmQN
ClNlZSB0aGUgSU5TVEFMTCBmaWxlIGZvciBtb3JlIGRldGFpbHMuDQpcZW5kX2xheW91dA0K
DQpcYmVnaW5fbGF5b3V0IFN1YnNlY3Rpb24NCkkgaGF0ZSBjb21waWxpbmcuDQogV2hlcmUg
YXJlIHByZWNvbXBpbGVkIGJpbmFyaWVzPw0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91
dCBTdGFuZGFyZA0KTW9zdCBvZiB0aGUgYWJvdmUgcGFja2FnZXMgYXJlIGF2YWlsYWJsZSBh
cyBwcmVjb21waWxlZCBiaW5hcmllcyBpbiBhIHZhcmlldHkNCiBvZiBMaW51eCBzeXN0ZW1z
LCBwZXJoYXBzIG90aGVycyBhcyB3ZWxsLg0KIFRoZSBMeVggYmluYXJpZXMgYXJlIGF2YWls
YWJsZSBhcyBSUE1TLCBXaW5kb3dzIGFuZCBNYWMgaW5zdGFsbGVycywgcGx1cw0KIGEgZmV3
IG90aGVyIGZvcm1hdHMgYW5kIG1heSBiZSBvYnRhaW5lZCBmcm9tIA0KXGJlZ2luX2luc2V0
IEZsZXggVVJMDQpzdGF0dXMgY29sbGFwc2VkDQoNClxiZWdpbl9sYXlvdXQgUGxhaW4gTGF5
b3V0DQoNCmZ0cDovL2Z0cC5seXgub3JnL3B1Yi9seXgvYmluLw0KXGVuZF9sYXlvdXQNCg0K
XGVuZF9pbnNldA0KDQouDQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IFNlY3Rpb24N
ClF1ZXN0aW9ucyBhYm91dCBFdmlsIFJlZCBUZXh0IChJTVBPUlRBTlQhKQ0KXGVuZF9sYXlv
dXQNCg0KXGJlZ2luX2xheW91dCBTdWJzZWN0aW9uDQpXaGF0IGlzIEV2aWwgUmVkIFRleHQg
KGFrYSBFUlQpPw0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdGFuZGFyZA0KRVJU
IChFdmlsIFJlZCBUZXh0KSByZWZlcnMgdG8gcmF3IExhVGVYIGNvbW1hbmRzIHdoaWNoIGFy
ZSBpbnNlcnRlZCBpbnRvDQogeW91ciBMeVggZG9jdW1lbnQuDQogQ2VydGFpbiB0cm9nbG9k
eXRlcyBpbiB0aGUgZGV2ZWxvcG1lbnQgZ3JvdXAgY29pbmVkIHRoaXMgdGVybSB3aGVuIHRo
ZXkNCiBjb21wbGFpbmVkIGFib3V0IHRoZSB1bnNpZ2h0bHkgYXBwZWFyYW5jZSBpdCBsZWFk
cyB0byBpbiBMeVggZG9jdW1lbnRzLg0KIFRoZSBtb3JlIGVubGlnaHRlbmVkIGFtb25nIHVz
IGtub3cgdGhhdCBpdCBpcyBleHRyZW1lbHkgdXNlZnVsLCBldmVuIHRob3VnaA0KIGl0IGRv
ZXMgcXVhbGlmeSBhcyBVUlQgKFVnbHkgUmVkIFRleHQpLCBidXQgRVJUIHNlZW1zIHRvIGhh
dmUgc3R1Y2suDQogDQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IFN1YnNlY3Rpb24N
CkhvdyBkbyBJIGVudGVyIEV2aWwgUmVkIFRleHQ/DQpcZW5kX2xheW91dA0KDQpcYmVnaW5f
bGF5b3V0IFN0YW5kYXJkDQpBZXN0aGV0aWMgYXJndW1lbnRzIGFzaWRlLCBtYW55IG9mIHRo
ZSBhbnN3ZXJzIGluIHRoaXMgRkFRIHJlcXVpcmUgdGhhdA0KIHlvdSB1c2UgRVJULCBzbyB3
aGVuZXZlciB3ZSBzYXkgDQpcYmVnaW5faW5zZXQgUXVvdGVzIGVsZA0KXGVuZF9pbnNldA0K
DQppbnNlcnQgdGhlIGZvbGxvd2luZyBMYVRlWCBjb2RlDQpcYmVnaW5faW5zZXQgUXVvdGVz
IGVyZA0KXGVuZF9pbnNldA0KDQosIGRvIHRoZSBmb2xsb3dpbmcNClxlbmRfbGF5b3V0DQoN
ClxiZWdpbl9sYXlvdXQgRW51bWVyYXRlDQpDbGljayB0aGUgVGVYIHRvb2xiYXIgYnV0dG9u
IG9yIHNlbGVjdCANClxmYW1pbHkgc2Fucw0KXGJhciB1bmRlcg0KSQ0KXGJhciBkZWZhdWx0
DQpuc2VydFxTcGVjaWFsQ2hhciBcbWVudXNlcGFyYXRvcg0KDQpcYmFyIHVuZGVyDQpUDQpc
YmFyIGRlZmF1bHQNCmVYDQpcZmFtaWx5IGRlZmF1bHQNCi4NClxlbmRfbGF5b3V0DQoNClxi
ZWdpbl9sYXlvdXQgRW51bWVyYXRlDQpUeXBlIHRoZSBjb21tYW5kIGFzIGl0IGlzIHdyaXR0
ZW4gaW4gdGhlIG5vcm1hbCB3YXkNClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Vi
c2VjdGlvbg0KVGhlIG5ldyBFUlQgaW5zZXQgaXMgcmVhbGx5IGluY29udmVuaWVudCAhDQpc
ZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IFN0YW5kYXJkDQpBIGxvdCBvZiBwZW9wbGUg
aGF2ZSBiZWVuIGNvbXBsYWluaW5nIGFib3V0IHRoZSBFUlQgaW5zZXQgaW50cm9kdWNlZCBp
bg0KIHZlcnNpb24gMS4yLjAuDQogSG93ZXZlciwgc2luY2UgdGhlcmUgaXMgbGl0dGxlIGhv
cGUgb2YgdG8gc2VlIHRoZSBvbGQgTGFUZVggZm9udCByZXR1cm4NCiBmcm9tIHRoZSBncmF2
ZSAoaXQgd2FzIHJlYWxseSBhIGhhY2spLCBoZXJlIGFyZSBhIGNvdXBsZSBvZiB0aGluZ3Mg
dG8gcG9uZGVyOg0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBJdGVtaXplDQpZb3Ug
Y2FuIGNvbGxhcHNlIHRoZSBFUlQgbGlrZSBhbnkgb3RoZXIgZmxvYXRzIGJ5IHVzaW5nIA0K
XGZhbWlseSBzYW5zDQpcYmFyIHVuZGVyDQpFDQpcYmFyIGRlZmF1bHQNCmRpdFxTcGVjaWFs
Q2hhciBcbWVudXNlcGFyYXRvcg0KT3Blbi9DDQpcYmFyIHVuZGVyDQpsDQpcYmFyIGRlZmF1
bHQNCm9zZSBmbG9hdA0KXGZhbWlseSBkZWZhdWx0DQogKGJvdW5kIHRvIA0KXGZhbWlseSBz
YW5zDQpDLWkNClxmYW1pbHkgZGVmYXVsdA0KIGJ5IGRlZmF1bHQpDQpcZW5kX2xheW91dA0K
DQpcYmVnaW5fbGF5b3V0IEl0ZW1pemUNCllvdSBjYW4gYWxzbyBzZXQgaXQgdG8gDQpcYmVn
aW5faW5zZXQgUXVvdGVzIGVsZA0KXGVuZF9pbnNldA0KDQppbmxpbmVkDQpcYmVnaW5faW5z
ZXQgUXVvdGVzIGVyZA0KXGVuZF9pbnNldA0KDQogYnkgdXNpbmcgdGhlIHByb3BlcnRpZXMg
ZGlhbG9nIG9idGFpbmVkIGJ5IHJpZ2h0LWNsaWNraW5nIGFueXdoZXJlIGluIHRoZQ0KIGlu
c2V0DQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IFN1YnNlY3Rpb24NCklzIHRoZXJl
IGFuIGFsdGVybmF0aXZlPw0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdGFuZGFy
ZA0KTGFUZVggY29tbWFuZHMgY2FuIGFsc28gYmUgaW5zZXJ0ZWQgaW4gdGhlIA0KXGJlZ2lu
X2luc2V0IFF1b3RlcyBlbGQNClxlbmRfaW5zZXQNCg0KTGFUZVggUHJlYW1ibGUNClxiZWdp
bl9pbnNldCBRdW90ZXMgZXJkDQpcZW5kX2luc2V0DQoNCiwgYSBmb3JtIGluIEx5WCB0aGF0
IGlzIGluc2VydGVkIHZlcmJhdGltIGludG8gdGhlIExhVGVYIGZpbGUgd2hpY2ggaXMgZ2Vu
ZXJhdGVkDQogZHVyaW5nIHByb2Nlc3NpbmcuDQogVGhpcyBpcyBlc3BlY2lhbGx5IHVzZWZ1
bCBmb3IgaW5jbHVkaW5nIG5vbnN0YW5kYXJkIExhVGVYIHBhY2thZ2VzLCBkZWZpbmluZw0K
IGdsb2JhbCBzaG9ydGN1dHMgdG8gYmUgdXNlZCB3aXRoaW4gdGhlIGRvY3VtZW50LCBldGMu
DQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IFNlY3Rpb24NClF1ZXN0aW9ucyBSZWxh
dGVkIHRvIFVzaW5nIEx5WA0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdGFuZGFy
ZA0KSW4gdGhpcyBzZWN0aW9uLCB3ZSBhdHRlbXB0IHRvIGFkZHJlc3MgdGhlIHRydWx5IG1v
c3QgZnJlcXVlbnRseSBhc2tlZCBxdWVzdGlvbnMuDQogRm9yIGEgYnJvYWRlciByYW5nZSBv
ZiBub3Qtc28tZnJlcXVlbnRseSBhc2tlZCBxdWVzdGlvbnMgYW5kIG1hbnkgDQpcYmVnaW5f
aW5zZXQgUXVvdGVzIGVsZA0KXGVuZF9pbnNldA0KDQpob3cgZG8gST8NClxiZWdpbl9pbnNl
dCBRdW90ZXMgZXJkDQpcZW5kX2luc2V0DQoNCiB0b3BpY3MsIHNlZSBIZXJiZXJ0IFZvc3Mn
IHNwZWN0YWN1bGFyIGNvbGxlY3Rpb24gYXQgDQpcYmVnaW5faW5zZXQgRmxleCBVUkwNCnN0
YXR1cyBjb2xsYXBzZWQNCg0KXGJlZ2luX2xheW91dCBQbGFpbiBMYXlvdXQNCg0KaHR0cDov
L3R1Zy5vcmcvVGVYbmlrLw0KXGVuZF9sYXlvdXQNCg0KXGVuZF9pbnNldA0KDQouDQogWW91
IGFyZSBkb2luZyB5b3Vyc2VsZiBhIGxhcmdlIGRpc3NlcnZpY2UgaWYgeW91IGRvbid0IGNo
ZWNrIHRoZXJlIGJlZm9yZQ0KIHNlbmRpbmcgYSBtZXNzYWdlIHRvIHRoZSBtYWlsaW5nIGxp
c3RzIQ0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdWJzZWN0aW9uDQpHZW5lcmFs
IHF1ZXN0aW9ucw0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdWJzdWJzZWN0aW9u
DQpIb3cgZG8gSSBnZXQgcmlkIG9mIHRoZSBkYXRlIHVuZGVyIHRoZSB0aXRsZT8NClxlbmRf
bGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3RhbmRhcmQNClRoZSBzaW1wbGVzdCBzb2x1dGlv
biBpcyB0byBvcGVuIHRoZSBtZW51IA0KXGZhbWlseSBzYW5zDQpcYmFyIHVuZGVyDQpMDQpc
YmFyIGRlZmF1bHQNCmF5b3V0XFNwZWNpYWxDaGFyIFxtZW51c2VwYXJhdG9yDQpQDQpcYmFy
IHVuZGVyDQpyDQpcYmFyIGRlZmF1bHQNCmVhbWJsZQ0KXGZhbWlseSBkZWZhdWx0DQogYW5k
IGFkZCB0aGUgbGluZQ0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBMeVgtQ29kZQ0K
DQpcYmFja3NsYXNoDQpkYXRle30NClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Rh
bmRhcmQNCmluIHRoZSBwcmVhbWJsZSB3aW5kb3cuDQpcZW5kX2xheW91dA0KDQpcYmVnaW5f
bGF5b3V0IFN1YnN1YnNlY3Rpb24NCkhvdyBkbyBJIGNoYW5nZSB0aGUgc3BhY2luZyBpbiBh
biBJdGVtaXplL1xTcGVjaWFsQ2hhciBcLQ0KRW51bWVyYXRlL1xTcGVjaWFsQ2hhciBcLQ0K
RGVzY3JpcHRpb24gbGlzdCBlbnZpcm9ubWVudA0KPw0KXGVuZF9sYXlvdXQNCg0KXGJlZ2lu
X2xheW91dCBTdGFuZGFyZA0KWW91J2xsIGhhdmUgdG8gZG8gdGhpcyBieSBoYW5kOiBmb3Ig
ZXhhbXBsZSwgZm9yIG9uZSBwYXJ0aWN1bGFyIGxpc3QsIHlvdQ0KIGNhbiBhZGQgdGhlIGZv
bGxvd2luZyBMYVRlWCBjb2RlIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpc3Q6IA0KXGVu
ZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdGFuZGFyZA0KDQpcZmFtaWx5IHR5cGV3cml0
ZXINCg0KXGJhY2tzbGFzaA0Kc2V0bGVuZ3Roew0KXGJhY2tzbGFzaA0KaXRlbXNlcH17MG1t
fQ0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdWJzdWJzZWN0aW9uDQpIb3cgZG8g
SSBudW1iZXIgZXF1YXRpb25zIGJ5IHNlY3Rpb24/DQpcZW5kX2xheW91dA0KDQpcYmVnaW5f
bGF5b3V0IFN0YW5kYXJkDQpBZGQgdGhlIGZvbGxvd2luZyB0d28gbGluZXMgdG8geW91ciBM
YVRlWCBwcmVhbWJsZToNClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgTHlYLUNvZGUN
Cg0KXGJhY2tzbGFzaA0KQGFkZHRvcmVzZXR7ZXF1YXRpb259e3NlY3Rpb259IA0KXGVuZF9s
YXlvdXQNCg0KXGJlZ2luX2xheW91dCBMeVgtQ29kZQ0KDQpcYmFja3NsYXNoDQpyZW5ld2Nv
bW1hbmR7DQpcYmFja3NsYXNoDQp0aGVlcXVhdGlvbn17DQpcYmFja3NsYXNoDQp0aGVzZWN0
aW9uLg0KXGJhY2tzbGFzaA0KYXJhYmlje2VxdWF0aW9ufX0NClxlbmRfbGF5b3V0DQoNClxi
ZWdpbl9sYXlvdXQgU3Vic3Vic2VjdGlvbg0KSXMgaXQgcG9zc2libGUgdG8gZG8gdGhpcyBm
b3IgZmlndXJlcyBhbmQgdGFibGVzIGFzIHdlbGw/DQpcZW5kX2xheW91dA0KDQpcYmVnaW5f
bGF5b3V0IFN0YW5kYXJkDQpSZXBsYWNlIHRoZSBwaHJhc2UgDQpcZmFtaWx5IHR5cGV3cml0
ZXINCg0KXGJhY2tzbGFzaA0KdGhlZXF1YXRpb24NClxmYW1pbHkgZGVmYXVsdA0KIHdpdGgg
DQpcZmFtaWx5IHR5cGV3cml0ZXINCg0KXGJhY2tzbGFzaA0KdGhldGFibGUNClxmYW1pbHkg
ZGVmYXVsdA0KIG9yIA0KXGZhbWlseSB0eXBld3JpdGVyDQoNClxiYWNrc2xhc2gNCnRoZWZp
Z3VyZQ0KXGZhbWlseSBkZWZhdWx0DQogYW5kIHRoZW4gcmVwbGFjZSANClxmYW1pbHkgdHlw
ZXdyaXRlcg0KZXF1YXRpb24NClxmYW1pbHkgZGVmYXVsdA0KIHdpdGggDQpcZmFtaWx5IHR5
cGV3cml0ZXINCnRhYmxlDQpcZmFtaWx5IGRlZmF1bHQNCiBvciANClxmYW1pbHkgdHlwZXdy
aXRlcg0KZmlndXJlDQpcZmFtaWx5IGRlZmF1bHQNCi4NCiBEb24ndCBmb3JnZXQgdG8gYWRh
cHQgdGhlIA0KXGJhY2tzbGFzaA0KQGFkZHRvcmVzZXQgY29tbWFuZCwgdG9vLg0KXGVuZF9s
YXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdWJzdWJzZWN0aW9uDQpIb3cgZG8gSSBjaGFuZ2Ug
dG8gZm9vdG5vdGUgbnVtYmVycyB0byBzeW1ib2xzIChzdGFyLCBkYWdnZXIsIGV0Yy4pPw0K
XGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdGFuZGFyZA0KQWRkIA0KXGZhbWlseSB0
eXBld3JpdGVyDQoNClxiYWNrc2xhc2gNCnJlbmV3Y29tbWFuZHsNClxiYWNrc2xhc2gNCnRo
ZWZvb3Rub3RlfXsNClxiYWNrc2xhc2gNCmZuc3ltYm9se2Zvb3Rub3RlfX0NClxmYW1pbHkg
ZGVmYXVsdA0KIHRvIHlvdXIgTGFUZVggcHJlYW1ibGUuDQpcZW5kX2xheW91dA0KDQpcYmVn
aW5fbGF5b3V0IFN1YnN1YnNlY3Rpb24NCkhvdyBkbyBJIGtpbGwgd2lkb3dzIGFuZCBvcnBo
YW5zPw0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdGFuZGFyZA0KT2theSwgd2Ug
YXJlIG5vdCBwbGF5aW5nIER1a2UgTnVrZW0gaGVyZSEgVG8gZWxpbWluYXRlIHdpZG93cyBh
bmQgb3JwaGFucw0KIChmaXJzdCBsaW5lIGZyb20gYSBwYXJhZ3JhcGggYXQgdGhlIGJvdHRv
bSBvZiB0aGUgcGFnZSBhbmQgdGhlIGxhc3QgbGluZQ0KIGZyb20gYSBwYXJhZ3JhcGggYXQg
dGhlIHRvcCBvZiB0aGUgcGFnZSksIGFkZCB0aGUgZm9sbG93aW5nIHRvIHRoZSBMYVRlWA0K
IHByZWFtYmxlOg0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBMeVgtQ29kZQ0KDQpc
YmFja3NsYXNoDQp3aWRvd3BlbmFsdHk9MTAwMDAgDQpcZW5kX2xheW91dA0KDQpcYmVnaW5f
bGF5b3V0IEx5WC1Db2RlDQoNClxiYWNrc2xhc2gNCmNsdWJwZW5hbHR5PTEwMDAwIA0KXGVu
ZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdGFuZGFyZA0KYW5kIHBlcmhhcHMNClxlbmRf
bGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgTHlYLUNvZGUNCg0KXGJhY2tzbGFzaA0KcmFnZ2Vk
Ym90dG9tDQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IEx5WC1Db2RlDQoNClxlbmRf
bGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Vic3Vic2VjdGlvbg0KSG93IGRvIEkgZ2V0IGEg
Zm9ybWF0dGVkIGxpc3Qgd2hpY2ggc3RhcnRzIHdpdGggZS5nLg0KIDEuDQogYSk/DQpcZW5k
X2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IFN0YW5kYXJkDQpJZiB5b3Ugd2FudCBhIGxpc3Qg
d2hpY2ggbG9va3MgbGlrZQ0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBMeVgtQ29k
ZQ0KMS4NCiBhKSBGaXJzdCBhbHRlcm5hdGl2ZSANClxlbmRfbGF5b3V0DQoNClxiZWdpbl9s
YXlvdXQgTHlYLUNvZGUNCiAgIGIpIFNlY29uZCBhbHRlcm5hdGl2ZSANClxlbmRfbGF5b3V0
DQoNClxiZWdpbl9sYXlvdXQgTHlYLUNvZGUNCiAgIGMpIFRoaXJkIGFsdGVybmF0aXZlDQpc
ZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IFN0YW5kYXJkDQp0aGVuIHRyeSB0aGUgZm9s
bG93aW5nDQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IEx5WC1Db2RlDQoxLg0KIHt9
IA0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBMeVgtQ29kZQ0KICAgYSkgRmlyc3Qg
YWx0ZXJuYXRpdmUgDQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IEx5WC1Db2RlDQog
ICBiKSBTZWNvbmQgYWx0ZXJuYXRpdmUgDQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0
IEx5WC1Db2RlDQogICBjKSBUaGlyZA0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBT
dGFuZGFyZA0Kd2hlcmUge30gaXMgaW4gRVJUIChpLmUuDQogYSBwbGFjZWhvbGRlciBub3Qg
Z2VuZXJhdGluZyBvdXRwdXQuDQogU3BlY2lmaWNhbGx5LCBzZXQgdGhlIHN0eWxlIHRvIA0K
XGJlZ2luX2luc2V0IFF1b3RlcyBlbGQNClxlbmRfaW5zZXQNCg0KZW51bWVyYXRlDQpcYmVn
aW5faW5zZXQgUXVvdGVzIGVyZA0KXGVuZF9pbnNldA0KDQosIGVudGVyIHRoZSBicmFja2V0
cyBpbiBFUlQsIGNoYW5nZSB0aGUgZW52aXJvbm1lbnQgZGVwdGgsIGFuZCBhZGQgdGhlIHRo
cmVlDQogZWxlbWVudHMuDQogTHlYIHdpbGwgYXV0by1sYWJlbCB0aGUgZW50cmllcy4NClxl
bmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Vic3Vic2VjdGlvbg0KSG93IGRvIEkgaW5z
ZXJ0IGEgZml4ZWQgYW1vdW50IG9mIGhvcml6b250YWwgc3BhY2U/DQpcZW5kX2xheW91dA0K
DQpcYmVnaW5fbGF5b3V0IFN0YW5kYXJkDQpUaGVyZSBhcmUgdmFyaW91cyBFUlQgY29tbWFu
ZHMgdG8gdXNlOiANClxmYW1pbHkgdHlwZXdyaXRlcg0KDQpcYmFja3NsYXNoDQplbnNwYWNl
DQpcZmFtaWx5IGRlZmF1bHQNCiAoMS8yIGVtKSwgDQpcZmFtaWx5IHR5cGV3cml0ZXINCg0K
XGJhY2tzbGFzaA0KdGhpbnNwYWNlDQpcZmFtaWx5IGRlZmF1bHQNCiAoMS82IGVtKSwgDQpc
ZmFtaWx5IHR5cGV3cml0ZXINCg0KXGJhY2tzbGFzaA0KbmVndGhpbnNwYWNlDQpcZmFtaWx5
IGRlZmF1bHQNCiAoLTEvNiBlbSksIA0KXGZhbWlseSB0eXBld3JpdGVyDQoNClxiYWNrc2xh
c2gNCnF1YWQNClxmYW1pbHkgZGVmYXVsdA0KICgxIGVtKSwgDQpcZmFtaWx5IHR5cGV3cml0
ZXINCg0KXGJhY2tzbGFzaA0KcXF1YWQNClxmYW1pbHkgZGVmYXVsdA0KICgyIGVtKSwgDQpc
ZmFtaWx5IHR5cGV3cml0ZXINCg0KXGJhY2tzbGFzaA0KaHNwYWNlew0KXGVtcGggb24NCmxl
bmd0aA0KXGVtcGggZGVmYXVsdA0KfQ0KXGZhbWlseSBkZWZhdWx0DQosIGV0Yy4NCiBBbiAN
ClxiZWdpbl9pbnNldCBRdW90ZXMgZWxkDQpcZW5kX2luc2V0DQoNCmVtDQpcYmVnaW5faW5z
ZXQgUXVvdGVzIGVyZA0KXGVuZF9pbnNldA0KDQogaXMgcm91Z2hseSB0aGUgd2lkdGggb2Yg
dGhlIGxldHRlciANClxiZWdpbl9pbnNldCBRdW90ZXMgZWxkDQpcZW5kX2luc2V0DQoNCm0N
ClxiZWdpbl9pbnNldCBRdW90ZXMgZXJkDQpcZW5kX2luc2V0DQoNCiBpbiB0aGUgY3VycmVu
dCBmb250Lg0KIFRoZSBsZW5ndGggYXJndW1lbnQgb2YgdGhlIA0KXGZhbWlseSB0eXBld3Jp
dGVyDQoNClxiYWNrc2xhc2gNCmhzcGFjZQ0KXGZhbWlseSBkZWZhdWx0DQogY29tbWFuZCBp
cyBhbnkgdmFsaWQgVGVYIGxlbmd0aDsgdW5pdHMgY2FuIGJlIA0KXGZhbWlseSB0eXBld3Jp
dGVyDQptbQ0KXGZhbWlseSBkZWZhdWx0DQogKG1pbGxpbWV0ZXJzKSwgDQpcZmFtaWx5IHR5
cGV3cml0ZXINCmNtDQpcZmFtaWx5IGRlZmF1bHQNCiAoY2VudGltZXRlcnMpLCANClxmYW1p
bHkgdHlwZXdyaXRlcg0KaW4NClxmYW1pbHkgZGVmYXVsdA0KIChpbmNoZXMpLCANClxmYW1p
bHkgdHlwZXdyaXRlcg0KcHQNClxmYW1pbHkgZGVmYXVsdA0KIChwb2ludHMgPSAxLzcyIGlu
Y2gpLCANClxmYW1pbHkgdHlwZXdyaXRlcg0KZW0NClxmYW1pbHkgZGVmYXVsdA0KICh3aWR0
aCBvZiBsZXR0ZXIgDQpcYmVnaW5faW5zZXQgUXVvdGVzIGVsZA0KXGVuZF9pbnNldA0KDQpt
DQpcYmVnaW5faW5zZXQgUXVvdGVzIGVyZA0KXGVuZF9pbnNldA0KDQopLCBvciANClxmYW1p
bHkgdHlwZXdyaXRlcg0KZXgNClxmYW1pbHkgZGVmYXVsdA0KIChoZWlnaHQgb2YgbGV0dGVy
IA0KXGJlZ2luX2luc2V0IFF1b3RlcyBlbGQNClxlbmRfaW5zZXQNCg0KeA0KXGJlZ2luX2lu
c2V0IFF1b3RlcyBlcmQNClxlbmRfaW5zZXQNCg0KKS4NCiBFeGFtcGxlczogDQpcZmFtaWx5
IHR5cGV3cml0ZXINCg0KXGJhY2tzbGFzaA0KaHNwYWNlezFpbn0NClxmYW1pbHkgZGVmYXVs
dA0KLCANClxmYW1pbHkgdHlwZXdyaXRlcg0KDQpcYmFja3NsYXNoDQpoc3BhY2V7Mi41ZW19
DQpcZmFtaWx5IGRlZmF1bHQNCiwgZXRjLg0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91
dCBTdWJzdWJzZWN0aW9uDQpIb3cgY2FuIEkgbWFrZSBjaXRhdGlvbnMgc2hvdyB1cCBhcyBb
MSwyLDMsNl0gb3IgWzEtMyw2XSByYXRoZXIgdGhhbiBbMV1bMl1bM11bNg0KXT8NClxlbmRf
bGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3RhbmRhcmQNCkluc2VydCANClxmYW1pbHkgdHlw
ZXdyaXRlcg0KDQpcYmFja3NsYXNoDQp1c2VwYWNrYWdle2NpdGV9DQpcZmFtaWx5IGRlZmF1
bHQNCiBpbnRvIHRoZSBMYVRlWCBwcmVhbWJsZS4NCiBNb3N0IExhVGVYIGRpc3RyaWJ1dGlv
bnMgc2hvdWxkIGhhdmUgdGhpcyBwYWNrYWdlIGluY2x1ZGVkLg0KIEx5WCBzdXBwb3J0cyB0
aGlzIHBhY2thZ2UsIGlmIHlvdSBpbnNlcnQgbXVsdGlwbGUgY2l0YXRpb25zIHNlcGFyYXRl
ZCBieQ0KIGNvbW1hcyBpbnRvIHRoZSBjaXRhdGlvbiBkaWFsb2csIGUuDQogZy4NCiBbU21h
bGxleV9KQ1AsSmFycm9sZF9TY2ldLCBpbnN0ZWFkIG9mIGp1c3Qgb25lIGNpdGF0aW9uIGFm
dGVyIHRoZSBvdGhlcjoNCiBbU21hbGxleV9KQ1BdIFtKYXJyb2xkX1NjaV0uDQpcZW5kX2xh
eW91dA0KDQpcYmVnaW5fbGF5b3V0IFN1YnNlY3Rpb24NCkZpZ3VyZSByZWxhdGVkIHF1ZXN0
aW9ucw0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdWJzdWJzZWN0aW9uDQpXaGF0
IGlzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gYSANClxiZWdpbl9pbnNldCBRdW90ZXMgZWxk
DQpcZW5kX2luc2V0DQoNCmZpZ3VyZQ0KXGJlZ2luX2luc2V0IFF1b3RlcyBlcmQNClxlbmRf
aW5zZXQNCg0KIGFuZCBhIA0KXGJlZ2luX2luc2V0IFF1b3RlcyBlbGQNClxlbmRfaW5zZXQN
Cg0KZmlndXJlIGZsb2F0DQpcYmVnaW5faW5zZXQgUXVvdGVzIGVyZA0KXGVuZF9pbnNldA0K
DQo/DQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IFN0YW5kYXJkDQpUaGlzIGlzIGFu
IGV4YW1wbGUgb2YgbGVzcy10aGFuLWlkZWFsIHRlcm1pbm9sb2d5Lg0KIA0KXGJlZ2luX2lu
c2V0IFF1b3RlcyBlbGQNClxlbmRfaW5zZXQNCg0KRmlndXJlDQpcYmVnaW5faW5zZXQgUXVv
dGVzIGVyZA0KXGVuZF9pbnNldA0KDQogaXMgd2hhdCBJIHdvdWxkIHJlYWxseSBjYWxsIGEg
DQpcYmVnaW5faW5zZXQgUXVvdGVzIGVsZA0KXGVuZF9pbnNldA0KDQpncmFwaGljDQpcYmVn
aW5faW5zZXQgUXVvdGVzIGVyZA0KXGVuZF9pbnNldA0KDQo7IGl0IGJhc2ljYWxseSBtZWFu
cyBpbnNlcnQgYSBwaWN0dXJlIGZpbGUuDQogDQpcYmVnaW5faW5zZXQgUXVvdGVzIGVsZA0K
XGVuZF9pbnNldA0KDQpGaWd1cmUgZmxvYXQNClxiZWdpbl9pbnNldCBRdW90ZXMgZXJkDQpc
ZW5kX2luc2V0DQoNCiBpcyBtb3JlIHdoYXQgb25lIG1lYW5zIGJ5IGEgZmlndXJlIGluIGEg
cGFwZXI6IGl0IGluY2x1ZGVzIHRoZSBncmFwaGljLA0KIHRoZSBjYXB0aW9uLCB0aGUgZmln
dXJlIGxhYmVsLCBldGMuDQogWW91IHNob3VsZCBhbG1vc3QgYWx3YXlzIGluc2VydCBhIGZp
Z3VyZSBmbG9hdCBmaXJzdCwgdGhlbiBwdXQgYSBmaWd1cmUNCiBpbnNpZGUgdGhhdC4NClxl
bmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3RhbmRhcmQNClRhYmxlcyB3b3JrIGluIHRo
ZSBzYW1lIG1hbm5lci4NCiBQdXQgYSB0YWJsZSBmbG9hdCBpbiBmaXJzdCwgdGhlbiBpbnNl
cnQgdGhlIHRhYmxlIHdpdGhpbiB0aGF0Lg0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91
dCBTdWJzdWJzZWN0aW9uDQpIb3cgZG8gSSBnZXQgTHlYIHRvIHB1dCB0aGUgZmlndXJlIGV4
YWN0bHkgd2hlcmUgSSB3YW50IGl0Pw0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBT
dGFuZGFyZA0KU2VsZWN0IA0KXGZhbWlseSBzYW5zDQpMYXlvdXRcU3BlY2lhbENoYXIgXG1l
bnVzZXBhcmF0b3INCkRvY3VtZW50DQpcZmFtaWx5IGRlZmF1bHQNCi4NCiBJbiB0aGUgDQpc
ZmFtaWx5IHNhbnMNCkZsb2F0IFBsYWNlbWVudA0KXGZhbWlseSBkZWZhdWx0DQogYm94LCB0
eXBlIA0KXGJlZ2luX2luc2V0IFF1b3RlcyBlbGQNClxlbmRfaW5zZXQNCg0KDQpcZmFtaWx5
IHR5cGV3cml0ZXINCiFodHANClxmYW1pbHkgZGVmYXVsdA0KDQpcYmVnaW5faW5zZXQgUXVv
dGVzIGVyZA0KXGVuZF9pbnNldA0KDQouDQogVGhpcyB0ZWxscyBMYVRlWCB0byB0cnkgcmVh
bGx5IGhhcmQgdG8gcHV0IHRoZSBmaWd1cmUgaGVyZSBmaXJzdCwgdGhlbg0KIHRoZSB0b3Ag
b2YgYSBwYWdlLCB0aGVuIG9uIGEgcGFnZSBieSBpdHNlbGYuDQogVGhpcyBpcyBhIGdsb2Jh
bCBzZXR0aW5nOiBhbGwgZmlndXJlIHdpbGwgdGhlbiBvYmV5IHRoaXMgcnVsZSBzZXQuDQpc
ZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IFN0YW5kYXJkDQpJZiB5b3Ugd2FudCB0byBj
b250cm9sIGhvdyBlYWNoIGZpZ3VyZSBiZWhhdmVzLCByaWdodC1jbGljayBpbiB0aGUgZmln
dXJlDQogZmxvYXQgYW5kIHlvdSB3aWxsIGdldCBhIGRpYWxvZyBhbGxvd2luZyB0byBjb250
cm9sIHRoZSBmaWd1cmUgYmVoYXZpb3IuDQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0
IFN1YnN1YnNlY3Rpb24NCldoYXQgZG9lcyANClxiZWdpbl9pbnNldCBRdW90ZXMgZWxkDQpc
ZW5kX2luc2V0DQoNClRvbyBtYW55IHVucHJvY2Vzc2VkIGZsb2F0cw0KXGJlZ2luX2luc2V0
IFF1b3RlcyBlcmQNClxlbmRfaW5zZXQNCg0KIG1lYW4/DQpcZW5kX2xheW91dA0KDQpcYmVn
aW5fbGF5b3V0IFN0YW5kYXJkDQpMYVRlWCBjYW4gaGFuZGxlIG9ubHkgYSBsaW1pdGVkIG51
bWJlciBvZiBmbG9hdGluZyBlbGVtZW50cyBmbG9hdGluZyBhdA0KIGEgZ2l2ZW4gdGltZS4N
CiBGb3IgZXhhbXBsZSwgaWYgRmlndXJlIDQgY2FuJ3QgYmUgZml0IGluIGEgZ29vZCBsb2Nh
dGlvbiAodXNpbmcgdGhlIGRlZmF1bHQNCiBydWxlcyBvZiB0b3Agb2YgdGhlIHBhZ2UsIHRo
ZW4gYm90dG9tLCB0aGVuIGEgcGFnZSBvZiBpdHMgb3duKSBhbmQgRmlndXJlDQogNSBjb21l
cyBhbG9uZywgdGhleSB3aWxsIGJvdGggY29udGludWUgdG8gZmxvYXQgdG93YXJkIHRoZSBl
bmQgb2YgdGhlIGRvY3VtZW50DQogdW50aWwgYSBnb29kIGxvY2F0aW9uIGNhbiBiZSBmb3Vu
ZC4NCiBJZiBub3RoaW5nIGdvb2QgdHVybnMgdXAsIHRoZXkgd2lsbCBqdXN0IGJlIHBsYWNl
ZCBhdCB0aGUgZW5kIG9mIHRoZSBkb2N1bWVudC4NCiBJZiB0aGVyZSBhcmUgdG9vIG1hbnkg
b2YgdGhlc2UsIExhVGVYIG92ZXJydW5zIGEgY291bnRlciBhbmQgZW1pdHMgdGhlDQogDQpc
YmVnaW5faW5zZXQgUXVvdGVzIGVsZA0KXGVuZF9pbnNldA0KDQp0b28gbWFueSB1bnByb2Nl
c3NlZCBmbG9hdHMNClxiZWdpbl9pbnNldCBRdW90ZXMgZXJkDQpcZW5kX2luc2V0DQoNCiBl
cnJvci4NCiBUaGlzIGlzIG5vdCBhIGJ1ZyBpbiBMYVRlWCwgdGhpcyBpcyBzaW1wbHkgdG9v
IG1hbnkgZmlndXJlcyB3aXRoIHRvbyBsaXR0bGUNCiB0ZXh0IDotKQ0KXGVuZF9sYXlvdXQN
Cg0KXGJlZ2luX2xheW91dCBTdGFuZGFyZA0KVGhlIGVhc2llc3Qgd2F5IHRvIHdvcmsgYXJv
dW5kIHRoaXMgaXMgdG8gaW5zZXJ0IGEgDQpcZmFtaWx5IHR5cGV3cml0ZXINCg0KXGJhY2tz
bGFzaA0KY2xlYXJwYWdlDQpcZmFtaWx5IGRlZmF1bHQNCiBjb21tYW5kIHNvbWV3aGVyZSBp
biB0aGUgZG9jdW1lbnQgd2hlcmUgYSBwYWdlYnJlYWsgd291bGQgYmUgYXBwcm9wcmlhdGUu
DQogV2hpbGUgYSBwYWdlYnJlYWsgd291bGQgc2ltcGx5IHN0YXJ0IGEgbmV3IHBhZ2UsIA0K
XGZhbWlseSB0eXBld3JpdGVyDQoNClxiYWNrc2xhc2gNCmNsZWFycGFnZQ0KXGZhbWlseSBk
ZWZhdWx0DQogcHJvY2Vzc2VzIGFsbCByZW1haW5pbmcgZmxvYXRzLCB0aGVuIGJlZ2lucyBh
IG5ldyBwYWdlLg0KIFRoaXMgbWF5IGxlYWQgdG8gYW4gdW5zaWdodGx5IHN0YWNrIG9mIGZp
Z3VyZXMgaW4gdGhlIG1pZGRsZSBvZiB5b3VyIGRvY3VtZW50Ow0KIHlvdSBtYXkgbmVlZCB0
byB1c2Ugc2V2ZXJhbCANClxmYW1pbHkgdHlwZXdyaXRlcg0KDQpcYmFja3NsYXNoDQpjbGVh
cnBhZ2VzDQpcZmFtaWx5IGRlZmF1bHQNCiB0byBtYWtlIHRoaW5ncyBiYWxhbmNlIG5pY2Vs
eS4NClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Vic2VjdGlvbg0KTWF0aCByZWxh
dGVkIHF1ZXN0aW9ucw0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdWJzdWJzZWN0
aW9uDQpIb3cgZG8gSSBwdXQgbm9ybWFsIHRleHQgaW5zaWRlIGEgbWF0aGVtYXRpY2FsIGVx
dWF0aW9uPw0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdGFuZGFyZA0KVHlwZSAN
ClxiZWdpbl9pbnNldCBRdW90ZXMgZWxkDQpcZW5kX2luc2V0DQoNCg0KXGZhbWlseSB0eXBl
d3JpdGVyDQpNLW0gbQ0KXGZhbWlseSBkZWZhdWx0DQoNClxiZWdpbl9pbnNldCBRdW90ZXMg
ZXJkDQpcZW5kX2luc2V0DQoNCiB3aGlsZSBpbnNpZGUgdGhlIGVxdWF0aW9uIHRvIGVudGVy
IA0KXGJlZ2luX2luc2V0IFF1b3RlcyBlbGQNClxlbmRfaW5zZXQNCg0KbWF0aCB0ZXh0IG1v
ZGUNClxiZWdpbl9pbnNldCBRdW90ZXMgZXJkDQpcZW5kX2luc2V0DQoNCi4NClxlbmRfbGF5
b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Vic3Vic2VjdGlvbg0KSG93IGRvIEkgbWFrZSBhIGN1
YmUgcm9vdCAob3IgaGlnaGVyKT8NClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Rh
bmRhcmQNClR5cGUgDQpcYmVnaW5faW5zZXQgUXVvdGVzIGVsZA0KXGVuZF9pbnNldA0KDQoN
ClxmYW1pbHkgdHlwZXdyaXRlcg0KTS1tIHINClxmYW1pbHkgZGVmYXVsdA0KDQpcYmVnaW5f
aW5zZXQgUXVvdGVzIGVyZA0KXGVuZF9pbnNldA0KDQogdG8gaW5zZXJ0IGEgbmlmdHkgDQpc
YmVnaW5faW5zZXQgUXVvdGVzIGVsZA0KXGVuZF9pbnNldA0KDQpyb290IGJveA0KXGJlZ2lu
X2luc2V0IFF1b3RlcyBlcmQNClxlbmRfaW5zZXQNCg0KLg0KIFVzZSB0aGUgY3Vyc29yIGtl
eXMgdG8gbmF2aWdhdGUgdGhlIGVudHJ5IGJveGVzLg0KXGVuZF9sYXlvdXQNCg0KXGJlZ2lu
X2xheW91dCBTZWN0aW9uDQpRdWVzdGlvbnMgUmVsYXRlZCB0byBSdW5uaW5nIEx5WA0KXGVu
ZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdWJzZWN0aW9uDQpIb3cgZG8gSSBjb252ZXJ0
IEx5WCBmaWxlcyB0byBMYVRlWCBmcm9tIHRoZSBjb21tYW5kIGxpbmU/DQpcZW5kX2xheW91
dA0KDQpcYmVnaW5fbGF5b3V0IFN0YW5kYXJkDQpGaWxlIGV4cG9ydCB3YXMgdmFzdGx5IGlt
cHJvdmVkIGluIHZlcnNpb24gMS4xLjYuDQogU2ltcGx5IHNheQ0KXGVuZF9sYXlvdXQNCg0K
XGJlZ2luX2xheW91dCBMeVgtQ29kZQ0KbHl4IC0tZXhwb3J0IGxhdGV4IDx5b3VyZmlsZT4u
bHl4DQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IFN0YW5kYXJkDQphbmQgdGhhdCBp
cyBhbGwgeW91IG5lZWQgdG8gZG8uDQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IFN0
YW5kYXJkDQpJZiB5b3UgaGF2ZSBhbiBvbGRlciB2ZXJzaW9uIG9mIEx5WCwgeW91IGNhbiB1
c2UgdGhlIHNhbWUgc3ludGF4IGlmIHlvdQ0KIGFyZSBydW5uaW5nIFgsIGJlY2F1c2UgaXQg
d2lsbCBjYXVzZSBMeVggd2luZG93cyB0byBwb3AgdXAgb250byB5b3VyIHNjcmVlbi4NCiBJ
ZiB5b3UgaGF2ZSB0aGUgWHZmYiBjb21tYW5kIGF2YWlsYWJsZSwgeW91IGNhbiByZXNvcnQg
dG8gYSBkZWVwZXIgbGV2ZWwNCiBvZiBzdWJ0ZXJmdWdlICh1bmRlciANClxmYW1pbHkgdHlw
ZXdyaXRlcg0KYmFzaA0KXGZhbWlseSBkZWZhdWx0DQopOg0KXGVuZF9sYXlvdXQNCg0KXGJl
Z2luX2xheW91dCBTdGFuZGFyZA0KDQpcZmFtaWx5IHR5cGV3cml0ZXINCihYdmZiIDoxIC1v
bmNlIC10ZXJtaW5hdGUgJik7IHJtIDxmaWxlPi50ZXg7IGx5eCAtZGlzcGxheSA6MSAtLWV4
cG9ydCBsYXRleA0KIDxmaWxlPi5seXgNClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQg
U3RhbmRhcmQNClxub2luZGVudA0KVW5kZXIgY3NoL3Rjc2ggaXQgaXMgc2ltcGx5DQpcZW5k
X2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IFN0YW5kYXJkDQoNClxmYW1pbHkgdHlwZXdyaXRl
cg0KWHZmYiA6MSAtb25jZSAtdGVybWluYXRlICY7IHJtIDxmaWxlPi50ZXg7IGx5eCAtZGlz
cGxheSA6MSAtLWV4cG9ydCBsYXRleA0KIDxmaWxlPi5seXgNClxlbmRfbGF5b3V0DQoNClxi
ZWdpbl9sYXlvdXQgU3RhbmRhcmQNClxub2luZGVudA0KVGhpcyBzaG91bGQgd29yayBhbnl3
aGVyZSwgd2hldGhlciBvciBub3QgWCBpcyBhY3R1YWxseSBydW5uaW5nLg0KXGVuZF9sYXlv
dXQNCg0KXGJlZ2luX2xheW91dCBTdWJzZWN0aW9uDQpXaHkgZG8gdGhlIGZvbnRzIGluIG15
IGRvY3VtZW50IGxvb2sgc28gYmFkIGluIA0KXGZhbWlseSB0eXBld3JpdGVyDQphY3JvcmVh
ZA0KXGZhbWlseSBkZWZhdWx0DQogPw0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBT
dGFuZGFyZA0KVGhlIHByb2JsZW0gYW5kIHRoZSBzb2x1dGlvbiBhcmUgYWxzbyBkaXNjdXNz
ZWQgaW4gU2VjdGlvbiA1LjMuNiBvZiB0aGUgDQpcZW1waCBvbg0KRXh0ZW5kZWQgRmVhdHVy
ZXMNClxlbXBoIGRlZmF1bHQNCiBtYW51YWwuDQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5
b3V0IFNlY3Rpb24NClF1ZXN0aW9ucyBSZWxhdGVkIHRvIEx5WCBvbiBXaW5kb3dzDQpcZW5k
X2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IFN1YnNlY3Rpb24NCldoeSBkbyB0aGUgbWVudXMg
YW5kIHRoZSB0b29sYmFyIGZsaWNrZXIgPw0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91
dCBTdGFuZGFyZA0KWW91IGFyZSBwcm9iYWJseSB1c2luZyB0aGUgWFdpbjMyIFggc2VydmVy
Lg0KIFRoaXMgaXMgYSBidWcgaW4gWFdpbjMyOiB5b3UgY2FuIHdvcmsgYXJvdW5kIHRoZSBw
cm9ibGVtIGJ5IGRpc2FibGluZyB0aGUNCiANClxiZWdpbl9pbnNldCBRdW90ZXMgZWxkDQpc
ZW5kX2luc2V0DQoNClVzZSBSZXNlcnZlZCBDb2xvcnMNClxiZWdpbl9pbnNldCBRdW90ZXMg
ZXJkDQpcZW5kX2luc2V0DQoNCiBvcHRpb24gb2YgWFdpbjMyLCBhbmQgdXNpbmcgYSBjb2xv
ciBtb2RlIG90aGVyIHRoYW4gUHNldWRvQ29sb3IuDQpcZW5kX2xheW91dA0KDQpcYmVnaW5f
bGF5b3V0IFNlY3Rpb24NCkhvdyB0byBnZXQgZnVydGhlciBhc3Npc3RhbmNlDQpcZW5kX2xh
eW91dA0KDQpcYmVnaW5fbGF5b3V0IFN1YnNlY3Rpb24NCllvdSBzdGlsbCBoYXZlbid0IGFu
c3dlcmVkIG15IHF1ZXN0aW9uISANClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Rh
bmRhcmQNClRoZW4gUlRGTSwgZXNwZWNpYWxseSB0aGUgVHV0b3JpYWwuDQogVGhlIGRvY3Vt
ZW50YXRpb24gcmVhbGx5IGlzIHF1aXRlIGdvb2QuDQogKEJlc2lkZXMsIEkgaGVscGVkIHdy
aXRlIHBhcnRzIG9mIGl0IDotKSBJZiB5b3UgdGhpbmsgeW91ciBwcm9ibGVtIG1heQ0KIGJl
IExhVGVYIHJlbGF0ZWQsIHRoZW4gbG9vayBpbiANClxlbXBoIG9uDQpMYVRlWCwgQSBEb2N1
bWVudCBQcmVwYXJhdGlvbiBTeXN0ZW0sIDJuZCBFZC4NCg0KXGVtcGggZGVmYXVsdA0KIGJ5
IExlc2xpZSBMYW1wb3J0ICgxOTk0KS4NCiBUaGVyZSBhcmUgYWxzbyBudW1lcm91cyBleGFt
cGxlIGZpbGVzIGluY2x1ZGVkIHdpdGggTHlYLg0KIFRyeSANClxmYW1pbHkgc2Fucw0KRmls
ZVxTcGVjaWFsQ2hhciBcbWVudXNlcGFyYXRvcg0KT3BlblxTcGVjaWFsQ2hhciBcbWVudXNl
cGFyYXRvcg0KRXhhbXBsZXMNClxmYW1pbHkgZGVmYXVsdA0KLg0KIERvbid0IGZvcmdldCB3
ZSBoYXZlIFRpcHMgYW5kIFRyaWNrcyBkYXRhYmFzZSBpbiBMeVggd2lraS4NClxlbmRfbGF5
b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Vic2VjdGlvbg0KSSB3YW50IHRvIG1haWwgc29tZW9u
ZSBhYm91dCBteSBwcm9ibGVtLg0KIA0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBT
dGFuZGFyZA0KU2VuZCBlbWFpbCB0byB0aGUgTHlYIFVzZXJzIGxpc3QgbHl4LXVzZXJzQGxp
c3RzLmx5eC5vcmcuDQogSWYgTHlYIGlzIGFjdHVhbGx5IGNyYXNoaW5nIG9yIG90aGVyd2lz
ZSBub24tZnVuY3Rpb25hbCwgdGhlbiB0cnkgdGhlIGRldmVsb3Blcg0KcycgbGlzdCBhdCBs
eXgtZGV2ZWxAbGlzdHMubHl4Lm9yZy4NClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQg
U3Vic2VjdGlvbg0KV2hhdCB0byBwdXQgaW4gYSByZXF1ZXN0IGZvciBoZWxwLg0KXGVuZF9s
YXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdGFuZGFyZA0KSW5jbHVkZSB5b3VyIHZlcnNpb24g
b2YgTHlYIGFuZCBhIGRlc2NyaXB0aW9uIG9mIHdoYXQgeW91IGFyZSB0cnlpbmcgdG8NCiBk
bywgYWxvbmcgd2l0aCBldmlkZW5jZSB0aGF0IHlvdSd2ZSBhY3R1YWxseSByZWFkIHRoZSBk
b2NzLg0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdGFuZGFyZA0KSWYgTHlYIGhh
cyBjcmFzaGVkLCBpbmNsdWRlIHRoZSB2ZXJzaW9uIG9mIEx5WCwgdGhlIG9wZXJhdGluZyBz
eXN0ZW0sIHRoZQ0KIHZlcnNpb24gb2YgeGZvcm1zIChpZiBpdCBzZWVtcyB0byBiZSBhIHNj
cmVlbiBkcmF3aW5nIHByb2JsZW0pLCBhbmQgYSBwcmVjaXNlDQogZGVzY3JpcHRpb24gb2Yg
dGhlIGV2ZW50cyB0aGF0IGxlYWQgdG8gdGhlIGNyYXNoLg0KIFRoZSBlYXNpZXIgaXQgaXMg
Zm9yIHRoZSBkZXZlbG9wZXJzIHRvIHJlcHJvZHVjZSB5b3VyIGNyYXNoLCB0aGUgbW9yZSBs
aWtlbHkNCiBpdCB3aWxsIGdldCBmaXhlZC4NCiBJZiB5b3UncmUgYnJhdmUgYW5kIGxpa2Ug
dG8gaGFjaywgdXNlIGdkYiB0byBnZW5lcmF0ZSBhIGJhY2t0cmFjZSBhbmQgaW5jbHVkZQ0K
IHRoZSByZXN1bHRzIHdpdGggeW91ciBtYWlsLg0KIElmIHlvdSBoYXZlIG5vIGNsdWUgd2hh
dCBJJ20gdGFsa2luZyBhYm91dCwganVzdCBkZXNjcmliZSB3aGF0IHlvdSBkaWQNCiBhcyBj
b21wbGV0ZWx5IGFzIHlvdSBjYW4uDQpcZW5kX2xheW91dA0KDQpcYmVnaW5fbGF5b3V0IFNl
Y3Rpb24NCkFkbWluaXN0cmF0aXZlIGluZm9ybWF0aW9uIGFuZCBhY2tub3dsZWRnbWVudHMN
ClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Vic2VjdGlvbg0KRmVlZGJhY2sgaXMg
aW52aXRlZC4NCiANClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3RhbmRhcmQNClNl
bmQgY29tbWVudHMsIHN1Z2dlc3RlZCBhZGRpdGlvbnMsIHdvcmxkIHJlY29yZCBkb2N1bWVu
dCBjbGFpbXMsIGV0Yy4NCiB0byANClxlbXBoIG9uDQpseXgtZG9jc0BsaXN0cy5seXgub3Jn
Lg0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91dCBTdWJzZWN0aW9uDQpGb3JtYXRzIGlu
IHdoaWNoIHRoaXMgRkFRIGlzIGF2YWlsYWJsZS4NCiANClxlbmRfbGF5b3V0DQoNClxiZWdp
bl9sYXlvdXQgU3RhbmRhcmQNClRoZSBMeVggZmlsZSBvcmlnaW5hbCBpcyBpbmNsdWRlZCBp
biB0aGUgTHlYIHNvdXJjZSBkaXN0cmlidXRpb24sIGNvbnZlcnRlZA0KIHZlcnNpb25zIGlu
IEhUTUwgYW5kIEFTQ0lJIHNob3VsZCBzb29uIGJlIGF2YWlsYWJsZSBhdCB0aGUgd2Vic2l0
ZS4NCiBBIEdlcm1hbiB2ZXJzaW9uIGlzIGFsc28gYXZhaWxhYmxlIHdpdGggdGhlIGRpc3Ry
aWJ1dGlvbi4NClxlbmRfbGF5b3V0DQoNClxiZWdpbl9sYXlvdXQgU3Vic2VjdGlvbg0KQXV0
aG9yc2hpcCBhbmQgYWNrbm93bGVkZ21lbnRzLg0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xh
eW91dCBTdGFuZGFyZA0KQmVybmhhcmQgSXNlbGJvcm4sIERhdmlkIEpvaG5zb24sIGFuZCBQ
YXVsIEV2YW5zIHdlcmUgcmVzcG9uc2libGUgZm9yIHRoZQ0KIEZBUSB0aHJvdWdoIHZlcnNp
b24gMC4yLjIgd2hpY2ggY292ZXJlZCBMeVgtMC4xMC43Lg0KIFRoZSBGQVEgYXMgb2YgdmVy
c2lvbiAwLjMuMCB3YXMgd3JpdHRlbiBmcm9tIHNjcmF0Y2ggYW5kIGNvdmVycyBMeVgtMS4w
IGFuZA0KIGhpZ2hlci4NCiBNYW55IHBlb3BsZSBjb250cmlidXRlZCBwaWVjZXMgdG8gdGhl
IGN1cnJlbnQgdmVyc2lvbjsgTWlrZSBSZXNzbGVyIG9mDQogdGhlIERvYyBUZWFtIGNvbGxl
Y3RlZCB0aGVtIGludG8gdGhpcyBmaWxlLg0KXGVuZF9sYXlvdXQNCg0KXGJlZ2luX2xheW91
dCBTdWJzZWN0aW9uDQpEaXNjbGFpbWVyIGFuZCBDb3B5cmlnaHQuDQogDQpcZW5kX2xheW91
dA0KDQpcYmVnaW5fbGF5b3V0IFN0YW5kYXJkDQpJIGRvbid0IGNsYWltIGFueXRoaW5nIGlu
IHRoaXMgZG9jdW1lbnQgaXMgYWNjdXJhdGUgdG8gd2l0aGluIGEgZmFjdG9yIG9mDQogDQpc
YmVnaW5faW5zZXQgRm9ybXVsYSAkXHBpJA0KXGVuZF9pbnNldA0KDQo7IGFmdGVyIGFsbCwg
SSdtIGp1c3QgYW4gYXN0cm9ub21lciwgYW5kIHdlIGxpa2UgdG8gc2V0IA0KXGJlZ2luX2lu
c2V0IEZvcm11bGEgJGM9aD1rPVxwaT0xJA0KXGVuZF9pbnNldA0KDQouDQogV2hlbiB0aGUg
YW5zd2VyIGlzIHdyb25nLCB3ZSBqdXN0IHJlZGVmaW5lIHRoZSB1bml0cy4NCiBUaGlzIGZp
bGUgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwg
YnV0IFdJVEhPVVQNCiBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3
YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUw0KIEZPUiBBIFBBUlRJQ1VM
QVIgUFVSUE9TRS4NCiBTZWUgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBt
b3JlIGRldGFpbHMuDQogSW4gb3RoZXIgd29yZHMsIGl0J3Mgbm90IG15IGZhdWx0IGlmIHlv
dSBsb3NlIHlvdXIgZGlzc2VydGF0aW9uIHRoZSBuaWdodA0KIGJlZm9yZSB5b3VyIGRvY3Rv
cmFsIGRlZmVuc2UgYmVjYXVzZSB5b3UgZm9yZ290IHRvIHNhdmUgaXQgYmVmb3JlIHRoZSBw
b3dlcg0KIGZhaWxlZCB3aGlsZSB3b25kZXJpbmcgaG93IGEgZnVuZGFtZW50YWwgcGh5c2lj
YWwgY29uc3RhbnQgZXhwcmVzc2VkIGluDQogdW5pdHMgb2YgDQpcYmVnaW5faW5zZXQgRm9y
bXVsYSAkXHRleHRybXttIHN9XnstMX0kDQpcZW5kX2luc2V0DQoNCiBjb3VsZCBwb3NzaWJs
eSBiZSBlcXVhbCB0byBvbmUgZXhwcmVzc2VkIGFzIA0KXGJlZ2luX2luc2V0IEZvcm11bGEg
JFx0ZXh0cm17a2cgbSBzfV57LTJ9XHRleHRybXsgS31eey0xfSQNClxlbmRfaW5zZXQNCg0K
Lg0KIFRoaXMgZmlsZSBpcyBDb3B5cmlnaHQgwqkgMjAwMCBieSBNaWNoYWVsIEUuDQogUmVz
c2xlciBvbiBiZWhhbGYgb2YgdGhlIEx5WCBEb2N1bWVudGF0aW9uIFRlYW0uDQpcZW5kX2xh
eW91dA0KDQpcZW5kX2JvZHkNClxlbmRfZG9jdW1lbnQNCg==
--------------090604090508090100070904--
