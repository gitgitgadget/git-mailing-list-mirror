From: "Shawn O. Pearce" <spearce@spearce.org>
Subject: [EGIT PATCH 05/11] Allow WorkingTreeIterators to define their prefix path when created
Date: Sun, 10 Aug 2008 01:46:20 -0700
Message-ID: <1218357986-19671-6-git-send-email-spearce@spearce.org>
References: <1218357986-19671-1-git-send-email-spearce@spearce.org>
 <1218357986-19671-2-git-send-email-spearce@spearce.org>
 <1218357986-19671-3-git-send-email-spearce@spearce.org>
 <1218357986-19671-4-git-send-email-spearce@spearce.org>
 <1218357986-19671-5-git-send-email-spearce@spearce.org>
Cc: git@vger.kernel.org
To: Robin Rosenberg <robin.rosenberg@dewire.com>,
	Marek Zawirski <marek.zawirski@gmail.com>
X-From: git-owner@vger.kernel.org Sun Aug 10 10:47:48 2008
Return-path: <git-owner@vger.kernel.org>
Envelope-to: gcvg-git-2@gmane.org
Received: from vger.kernel.org ([209.132.176.167])
	by lo.gmane.org with esmtp (Exim 4.50)
	id 1KS6aW-0001pt-Ks
	for gcvg-git-2@gmane.org; Sun, 10 Aug 2008 10:47:45 +0200
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752452AbYHJIql (ORCPT <rfc822;gcvg-git-2@m.gmane.org>);
	Sun, 10 Aug 2008 04:46:41 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S1752365AbYHJIqk
	(ORCPT <rfc822;git-outgoing>); Sun, 10 Aug 2008 04:46:40 -0400
Received: from george.spearce.org ([209.20.77.23]:51277 "EHLO
	george.spearce.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752307AbYHJIqb (ORCPT <rfc822;git@vger.kernel.org>);
	Sun, 10 Aug 2008 04:46:31 -0400
Received: by george.spearce.org (Postfix, from userid 1000)
	id CE09A38378; Sun, 10 Aug 2008 08:46:30 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.2.4 (2008-01-01) on george.spearce.org
X-Spam-Level: 
X-Spam-Status: No, score=-4.4 required=4.0 tests=ALL_TRUSTED,BAYES_00
	autolearn=ham version=3.2.4
Received: from localhost.localdomain (localhost [127.0.0.1])
	by george.spearce.org (Postfix) with ESMTP id 2B7B338375;
	Sun, 10 Aug 2008 08:46:30 +0000 (UTC)
X-Mailer: git-send-email 1.6.0.rc2.219.g1250ab
In-Reply-To: <1218357986-19671-5-git-send-email-spearce@spearce.org>
Sender: git-owner@vger.kernel.org
Precedence: bulk
List-ID: <git.vger.kernel.org>
X-Mailing-List: git@vger.kernel.org
Archived-At: <http://permalink.gmane.org/gmane.comp.version-control.git/91818>

When iterating a subset of the working directory over the full
repository tree (e.g. a CanonicalTreeParser run in parallel in
the same TreeWalk) we need the working directory to know what
prefix it must apply to all of its own generated paths so they
match up with the paths of the CanonicalTreeParser coming from
the object database.

The prefix is only set on the root level, as we only need to
inject it into the first iterator.  After that the shared path
buffer will ensure the subtree iterators (if any are created)
will have the proper path in them too.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
---
 .../jgit/treewalk/AbstractTreeIterator.java        |   36 ++++++++++++++++++++
 .../spearce/jgit/treewalk/WorkingTreeIterator.java |   20 +++++++++++
 2 files changed, 56 insertions(+), 0 deletions(-)

diff --git a/org.spearce.jgit/src/org/spearce/jgit/treewalk/AbstractTreeIterator.java b/org.spearce.jgit/src/org/spearce/jgit/treewalk/AbstractTreeIterator.java
index 64bb5be..cf67836 100644
--- a/org.spearce.jgit/src/org/spearce/jgit/treewalk/AbstractTreeIterator.java
+++ b/org.spearce.jgit/src/org/spearce/jgit/treewalk/AbstractTreeIterator.java
@@ -39,6 +39,8 @@
 package org.spearce.jgit.treewalk;
 
 import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.CharBuffer;
 
 import org.spearce.jgit.errors.CorruptObjectException;
 import org.spearce.jgit.errors.IncorrectObjectTypeException;
@@ -128,6 +130,40 @@ public abstract class AbstractTreeIterator {
 	}
 
 	/**
+	 * Create a new iterator with no parent and a prefix.
+	 * <p>
+	 * The prefix path supplied is inserted in front of all paths generated by
+	 * this iterator. It is intended to be used when an iterator is being
+	 * created for a subsection of an overall repository and needs to be
+	 * combined with other iterators that are created to run over the entire
+	 * repository namespace.
+	 * 
+	 * @param prefix
+	 *            position of this iterator in the repository tree. The value
+	 *            may be null or the empty string to indicate the prefix is the
+	 *            root of the repository. A trailing slash ('/') is
+	 *            automatically appended if the prefix does not end in '/'.
+	 */
+	protected AbstractTreeIterator(final String prefix) {
+		parent = null;
+
+		if (prefix != null && prefix.length() > 0) {
+			final ByteBuffer b;
+
+			b = Constants.CHARSET.encode(CharBuffer.wrap(prefix));
+			pathLen = b.limit();
+			path = new byte[Math.max(DEFAULT_PATH_SIZE, pathLen + 1)];
+			b.get(path, 0, pathLen);
+			if (path[pathLen - 1] != '/')
+				path[pathLen++] = '/';
+			pathOffset = pathLen;
+		} else {
+			path = new byte[DEFAULT_PATH_SIZE];
+			pathOffset = 0;
+		}
+	}
+
+	/**
 	 * Create an iterator for a subtree of an existing iterator.
 	 * 
 	 * @param p
diff --git a/org.spearce.jgit/src/org/spearce/jgit/treewalk/WorkingTreeIterator.java b/org.spearce.jgit/src/org/spearce/jgit/treewalk/WorkingTreeIterator.java
index 73c4b8b..afac77b 100644
--- a/org.spearce.jgit/src/org/spearce/jgit/treewalk/WorkingTreeIterator.java
+++ b/org.spearce.jgit/src/org/spearce/jgit/treewalk/WorkingTreeIterator.java
@@ -100,6 +100,26 @@ public abstract class WorkingTreeIterator extends AbstractTreeIterator {
 	}
 
 	/**
+	 * Create a new iterator with no parent and a prefix.
+	 * <p>
+	 * The prefix path supplied is inserted in front of all paths generated by
+	 * this iterator. It is intended to be used when an iterator is being
+	 * created for a subsection of an overall repository and needs to be
+	 * combined with other iterators that are created to run over the entire
+	 * repository namespace.
+	 * 
+	 * @param prefix
+	 *            position of this iterator in the repository tree. The value
+	 *            may be null or the empty string to indicate the prefix is the
+	 *            root of the repository. A trailing slash ('/') is
+	 *            automatically appended if the prefix does not end in '/'.
+	 */
+	protected WorkingTreeIterator(final String prefix) {
+		super(prefix);
+		nameEncoder = Constants.CHARSET.newEncoder();
+	}
+
+	/**
 	 * Create an iterator for a subtree of an existing iterator.
 	 * 
 	 * @param p
-- 
1.6.0.rc2.219.g1250ab
