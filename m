From: Michael Haggerty <mhagger@alum.mit.edu>
Subject: [PATCH 06/13] get_ref_cache(): only create an instance if there is a submodule
Date: Mon, 30 May 2016 09:55:27 +0200
Message-ID: <3d6c93bd7907f3e6c34787a47b1d75c5cca52a1b.1464537050.git.mhagger@alum.mit.edu>
References: <cover.1464537050.git.mhagger@alum.mit.edu>
Cc: Jeff King <peff@peff.net>,
	=?UTF-8?q?Nguy=E1=BB=85n=20Th=C3=A1i=20Ng=E1=BB=8Dc=20Duy?= 
	<pclouds@gmail.com>, git@vger.kernel.org,
	Michael Haggerty <mhagger@alum.mit.edu>
To: Junio C Hamano <gitster@pobox.com>,
	David Turner <dturner@twopensource.com>
X-From: git-owner@vger.kernel.org Mon May 30 09:56:09 2016
Return-path: <git-owner@vger.kernel.org>
Envelope-to: gcvg-git-2@plane.gmane.org
Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <git-owner@vger.kernel.org>)
	id 1b7I3V-0001FJ-DM
	for gcvg-git-2@plane.gmane.org; Mon, 30 May 2016 09:56:09 +0200
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932632AbcE3H4B (ORCPT <rfc822;gcvg-git-2@m.gmane.org>);
	Mon, 30 May 2016 03:56:01 -0400
Received: from alum-mailsec-scanner-8.mit.edu ([18.7.68.20]:63916 "EHLO
	alum-mailsec-scanner-8.mit.edu" rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S932500AbcE3Hz7 (ORCPT
	<rfc822;git@vger.kernel.org>); Mon, 30 May 2016 03:55:59 -0400
X-AuditID: 12074414-63fff700000008e6-73-574bf20ba004
Received: from outgoing-alum.mit.edu (OUTGOING-ALUM.MIT.EDU [18.7.68.33])
	by  (Symantec Messaging Gateway) with SMTP id EF.0C.02278.B02FB475; Mon, 30 May 2016 03:55:56 -0400 (EDT)
Received: from michael.fritz.box (p508EADDB.dip0.t-ipconnect.de [80.142.173.219])
	(authenticated bits=0)
        (User authenticated as mhagger@ALUM.MIT.EDU)
	by outgoing-alum.mit.edu (8.13.8/8.12.4) with ESMTP id u4U7tgRv032144
	(version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NOT);
	Mon, 30 May 2016 03:55:54 -0400
X-Mailer: git-send-email 2.8.1
In-Reply-To: <cover.1464537050.git.mhagger@alum.mit.edu>
X-Brightmail-Tracker: H4sIAAAAAAAAA+NgFnrOIsWRmVeSWpSXmKPExsUixO6iqMvzyTvcYPtZNov5m04wWnRd6Way
	aOi9wmxxe8V8ZovuKW8ZLX609DA7sHn8ff+ByWPnrLvsHs969zB6XLyk7LHg+X12j8+b5ALY
	orhtkhJLyoIz0/P07RK4M3bN/s9YMF+kYvK9DUwNjHsEuhg5OSQETCSeLm1n62Lk4hAS2Moo
	sbD3IwuEc5JJYvmvDawgVWwCuhKLepqZQGwRgQiJhlctjCBFzAL7GCVOrpvPApIQFgiXuPl4
	OSOIzSKgKnH/2w4gm4ODVyBKoulOLsQ2OYnL0x+wgdicAhYSE2e9A5spJGAusWzmSeYJjDwL
	GBlWMcol5pTm6uYmZuYUpybrFicn5uWlFula6OVmluilppRuYoQElMgOxiMn5Q4xCnAwKvHw
	Fmh6hwuxJpYVV+YeYpTkYFIS5XXjAArxJeWnVGYkFmfEF5XmpBYfYpTgYFYS4X37GCjHm5JY
	WZValA+TkuZgURLn/bZY3U9IID2xJDU7NbUgtQgmK8PBoSTBK/wRqFGwKDU9tSItM6cEIc3E
	wQkynEtKpDg1LyW1KLG0JCMeFAPxxcAoAEnxAO3d/wFkb3FBYi5QFKL1FKMux5H999YyCbHk
	5eelSonz2oMUCYAUZZTmwa2ApY9XjOJAHwvzSoFcwgNMPXCTXgEtYQJaYnbOC2RJSSJCSqqB
	cbVq67RPm2I/fXO4cubFx9aHLbtNjlrNs+d+JWO6YXbFYvWjAZl/hV7+aPBQf/OXTfrtv8NL
	4n+Lu9Vnax2d+vV/fGd2S7E9y31L3pKLHkInV7/JO/Zg/+ywDUsqNxt7X0x/mfDs 
Sender: git-owner@vger.kernel.org
Precedence: bulk
List-ID: <git.vger.kernel.org>
X-Mailing-List: git@vger.kernel.org
Archived-At: <http://permalink.gmane.org/gmane.comp.version-control.git/295863>

If there is not a nonbare repository where a submodule is supposedly
located, then don't instantiate a ref_cache for it.

The analogous check can be removed from resolve_gitlink_ref().

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
---
This doesn't actually reduce the number of ref_cache instances
generated by out test suite, but it is a more logical place for
the check that was added in

  a2d5156c resolve_gitlink_ref: ignore non-repository paths

 refs/files-backend.c | 33 ++++++++++++++++++++++-----------
 1 file changed, 22 insertions(+), 11 deletions(-)

diff --git a/refs/files-backend.c b/refs/files-backend.c
index a0d09f4..142c977 100644
--- a/refs/files-backend.c
+++ b/refs/files-backend.c
@@ -954,15 +954,26 @@ static struct ref_cache *lookup_ref_cache(const char *submodule)
 
 /*
  * Return a pointer to a ref_cache for the specified submodule. For
- * the main repository, use submodule==NULL. The returned structure
- * will be allocated and initialized but not necessarily populated; it
- * should not be freed.
+ * the main repository, use submodule==NULL; such a call cannot fail.
+ * For a submodule, the submodule must exist and be a nonbare
+ * repository, otherwise return NULL.
+ *
+ * The returned structure will be allocated and initialized but not
+ * necessarily populated; it should not be freed.
  */
 static struct ref_cache *get_ref_cache(const char *submodule)
 {
 	struct ref_cache *refs = lookup_ref_cache(submodule);
-	if (!refs)
-		refs = create_ref_cache(submodule);
+
+	if (!refs) {
+		struct strbuf submodule_sb = STRBUF_INIT;
+
+		strbuf_addstr(&submodule_sb, submodule);
+		if (is_nonbare_repository_dir(&submodule_sb))
+			refs = create_ref_cache(submodule);
+		strbuf_release(&submodule_sb);
+	}
+
 	return refs;
 }
 
@@ -1341,13 +1352,10 @@ int resolve_gitlink_ref(const char *path, const char *refname, unsigned char *sh
 		return -1;
 
 	strbuf_add(&submodule, path, len);
-	refs = lookup_ref_cache(submodule.buf);
+	refs = get_ref_cache(submodule.buf);
 	if (!refs) {
-		if (!is_nonbare_repository_dir(&submodule)) {
-			strbuf_release(&submodule);
-			return -1;
-		}
-		refs = create_ref_cache(submodule.buf);
+		strbuf_release(&submodule);
+		return -1;
 	}
 	strbuf_release(&submodule);
 
@@ -1885,6 +1893,9 @@ int do_for_each_ref(const char *submodule, const char *prefix,
 	struct ref_cache *refs;
 
 	refs = get_ref_cache(submodule);
+	if (!refs)
+		return 0;
+
 	data.prefix = prefix;
 	data.trim = trim;
 	data.flags = flags;
-- 
2.8.1
